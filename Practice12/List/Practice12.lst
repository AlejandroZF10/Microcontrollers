
AVRASM ver. 2.1.30  C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm Thu Nov 07 07:37:23 2019

C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1070): warning: Register r5 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1071): warning: Register r4 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1072): warning: Register r7 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1073): warning: Register r6 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1074): warning: Register r9 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice12\List\Practice12.asm(1075): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.60 Evaluation
                 ;(C) Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cuenta=R5
                 	.DEF _Inicio=R4
                 	.DEF _Clear=R7
                 	.DEF _Pausa=R6
                 	.DEF _i=R9
                 	.DEF _j=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c01f      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0000
000017 0000      	.DB  0x0,0x0,0x0,0x0
000018 0000      	.DB  0x0,0x0
                 
                 
                 __GLOBAL_INI_TBL:
000019 0002      	.DW  0x02
00001a 0002      	.DW  0x02
00001b 002a      	.DW  __REG_BIT_VARS*2
                 
00001c 0006      	.DW  0x06
00001d 0004      	.DW  0x04
00001e 002c      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00001f 0000      	.DW  0
                 
                 __RESET:
000020 94f8      	CLI
000021 27ee      	CLR  R30
000022 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000023 e0f1      	LDI  R31,1
000024 bffb      	OUT  GICR,R31
000025 bfeb      	OUT  GICR,R30
000026 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000027 e1f8      	LDI  R31,0x18
000028 bdf1      	OUT  WDTCR,R31
000029 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00002a e08d      	LDI  R24,(14-2)+1
00002b e0a2      	LDI  R26,2
00002c 27bb      	CLR  R27
                 __CLEAR_REG:
00002d 93ed      	ST   X+,R30
00002e 958a      	DEC  R24
00002f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000030 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000031 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000032 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000033 93ed      	ST   X+,R30
000034 9701      	SBIW R24,1
000035 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000036 e3e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000037 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000038 9185      	LPM  R24,Z+
000039 9195      	LPM  R25,Z+
00003a 9700      	SBIW R24,0
00003b f061      	BREQ __GLOBAL_INI_END
00003c 91a5      	LPM  R26,Z+
00003d 91b5      	LPM  R27,Z+
00003e 9005      	LPM  R0,Z+
00003f 9015      	LPM  R1,Z+
000040 01bf      	MOVW R22,R30
000041 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000042 9005      	LPM  R0,Z+
000043 920d      	ST   X+,R0
000044 9701      	SBIW R24,1
000045 f7e1      	BRNE __GLOBAL_INI_LOOP
000046 01fb      	MOVW R30,R22
000047 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000048 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000049 bfed      	OUT  SPL,R30
00004a e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00004c eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00004d e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00004e c000      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V2.60 Evaluation
                 ;Automatic Program Generator
                 ;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 04/11/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8535
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 128
                 ;*******************************************************/
                 ;
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#define boton_Adelante PINB.0
                 ;#define boton_Atras PINB.1
                 ;#define boton_Derecha PINB.2
                 ;#define boton_Izquierda PINB.3
                 ;#define boton_Start PINB.4
                 ;#define boton_Pause PINB.5
                 ;#define boton_Clear PINB.6
                 ;unsigned char cuenta = 0;
                 ;unsigned char Inicio = 0, Clear=0, Pausa=0, i=0, j=0;
                 ;unsigned char secuencia [10]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
                 ;bit botona_Adelante, botona_Atras, botona_Derecha, botona_Izquierda, botona_Start, botona_Pause, botona_Clear;
                 ;bit botonp_Adelante, botonp_Atras, botonp_Derecha, botonp_Izquierda, botonp_Start, botonp_Pause, botonp_Clear;
                 ;
                 ;void main(void){
                 ; 0000 0027 void main(void){
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0028 // Declare your local variables here
                 ; 0000 0029 
                 ; 0000 002A // Input/Output Ports initialization
                 ; 0000 002B // Port A initialization
                 ; 0000 002C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00004f e0e0      	LDI  R30,LOW(0)
000050 bbea      	OUT  0x1A,R30
                 ; 0000 002E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 002F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000051 bbeb      	OUT  0x1B,R30
                 ; 0000 0030 
                 ; 0000 0031 // Port B initialization
                 ; 0000 0032 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0033 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000052 bbe7      	OUT  0x17,R30
                 ; 0000 0034 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0035 PORTB=(1<<PORTB7) | (1<<PORTB6) | (1<<PORTB5) | (1<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000053 efef      	LDI  R30,LOW(255)
000054 bbe8      	OUT  0x18,R30
                 ; 0000 0036 
                 ; 0000 0037 // Port C initialization
                 ; 0000 0038 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0039 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000055 e0e0      	LDI  R30,LOW(0)
000056 bbe4      	OUT  0x14,R30
                 ; 0000 003A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000057 bbe5      	OUT  0x15,R30
                 ; 0000 003C 
                 ; 0000 003D // Port D initialization
                 ; 0000 003E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003F DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000058 efef      	LDI  R30,LOW(255)
000059 bbe1      	OUT  0x11,R30
                 ; 0000 0040 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0041 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00005a e0e0      	LDI  R30,LOW(0)
00005b bbe2      	OUT  0x12,R30
                 ; 0000 0042 
                 ; 0000 0043 // Timer/Counter 0 initialization
                 ; 0000 0044 // Clock source: System Clock
                 ; 0000 0045 // Clock value: Timer 0 Stopped
                 ; 0000 0046 // Mode: Normal top=0xFF
                 ; 0000 0047 // OC0 output: Disconnected
                 ; 0000 0048 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00005c bfe3      	OUT  0x33,R30
                 ; 0000 0049 TCNT0=0x00;
00005d bfe2      	OUT  0x32,R30
                 ; 0000 004A OCR0=0x00;
00005e bfec      	OUT  0x3C,R30
                 ; 0000 004B 
                 ; 0000 004C // Timer/Counter 1 initialization
                 ; 0000 004D // Clock source: System Clock
                 ; 0000 004E // Clock value: Timer1 Stopped
                 ; 0000 004F // Mode: Normal top=0xFFFF
                 ; 0000 0050 // OC1A output: Disconnected
                 ; 0000 0051 // OC1B output: Disconnected
                 ; 0000 0052 // Noise Canceler: Off
                 ; 0000 0053 // Input Capture on Falling Edge
                 ; 0000 0054 // Timer1 Overflow Interrupt: Off
                 ; 0000 0055 // Input Capture Interrupt: Off
                 ; 0000 0056 // Compare A Match Interrupt: Off
                 ; 0000 0057 // Compare B Match Interrupt: Off
                 ; 0000 0058 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00005f bdef      	OUT  0x2F,R30
                 ; 0000 0059 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000060 bdee      	OUT  0x2E,R30
                 ; 0000 005A TCNT1H=0x00;
000061 bded      	OUT  0x2D,R30
                 ; 0000 005B TCNT1L=0x00;
000062 bdec      	OUT  0x2C,R30
                 ; 0000 005C ICR1H=0x00;
000063 bde7      	OUT  0x27,R30
                 ; 0000 005D ICR1L=0x00;
000064 bde6      	OUT  0x26,R30
                 ; 0000 005E OCR1AH=0x00;
000065 bdeb      	OUT  0x2B,R30
                 ; 0000 005F OCR1AL=0x00;
000066 bdea      	OUT  0x2A,R30
                 ; 0000 0060 OCR1BH=0x00;
000067 bde9      	OUT  0x29,R30
                 ; 0000 0061 OCR1BL=0x00;
000068 bde8      	OUT  0x28,R30
                 ; 0000 0062 
                 ; 0000 0063 // Timer/Counter 2 initialization
                 ; 0000 0064 // Clock source: System Clock
                 ; 0000 0065 // Clock value: Timer2 Stopped
                 ; 0000 0066 // Mode: Normal top=0xFF
                 ; 0000 0067 // OC2 output: Disconnected
                 ; 0000 0068 ASSR=0<<AS2;
000069 bde2      	OUT  0x22,R30
                 ; 0000 0069 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00006a bde5      	OUT  0x25,R30
                 ; 0000 006A TCNT2=0x00;
00006b bde4      	OUT  0x24,R30
                 ; 0000 006B OCR2=0x00;
00006c bde3      	OUT  0x23,R30
                 ; 0000 006C 
                 ; 0000 006D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 006E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00006d bfe9      	OUT  0x39,R30
                 ; 0000 006F 
                 ; 0000 0070 // External Interrupt(s) initialization
                 ; 0000 0071 // INT0: Off
                 ; 0000 0072 // INT1: Off
                 ; 0000 0073 // INT2: Off
                 ; 0000 0074 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00006e bfe5      	OUT  0x35,R30
                 ; 0000 0075 MCUCSR=(0<<ISC2);
00006f bfe4      	OUT  0x34,R30
                 ; 0000 0076 
                 ; 0000 0077 // USART initialization
                 ; 0000 0078 // USART disabled
                 ; 0000 0079 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000070 b9ea      	OUT  0xA,R30
                 ; 0000 007A 
                 ; 0000 007B // Analog Comparator initialization
                 ; 0000 007C // Analog Comparator: Off
                 ; 0000 007D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000071 e8e0      	LDI  R30,LOW(128)
000072 b9e8      	OUT  0x8,R30
                 ; 0000 007E SFIOR=(0<<ACME);
000073 e0e0      	LDI  R30,LOW(0)
000074 bfe0      	OUT  0x30,R30
                 ; 0000 007F 
                 ; 0000 0080 // ADC initialization
                 ; 0000 0081 // ADC disabled
                 ; 0000 0082 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000075 b9e6      	OUT  0x6,R30
                 ; 0000 0083 
                 ; 0000 0084 // SPI initialization
                 ; 0000 0085 // SPI disabled
                 ; 0000 0086 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000076 b9ed      	OUT  0xD,R30
                 ; 0000 0087 
                 ; 0000 0088 // TWI initialization
                 ; 0000 0089 // TWI disabled
                 ; 0000 008A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000077 bfe6      	OUT  0x36,R30
                 ; 0000 008B 
                 ; 0000 008C while (1){
                 _0x3:
                 ; 0000 008D     if(Inicio == 0 ){
000078 2044      	TST  R4
000079 f009      	BREQ PC+2
00007a c091      	RJMP _0x6
                 ; 0000 008E 
                 ; 0000 008F       //****************** Presionar el boton Adelante --> 0x01
                 ; 0000 0090         if (boton_Adelante==0)
00007b 99b0      	SBIC 0x16,0
00007c c002      	RJMP _0x7
                 ; 0000 0091             botona_Adelante=0;
00007d 94e8      	CLT
00007e c001      	RJMP _0x78
                 ; 0000 0092         else
                 _0x7:
                 ; 0000 0093             botona_Adelante=1;
00007f 9468      	SET
                 _0x78:
000080 f820      	BLD  R2,0
                 ; 0000 0094         if ((botona_Adelante==0)&&(botonp_Adelante==1)){
000081 e0a0      	LDI  R26,0
000082 fc20      	SBRC R2,0
000083 e0a1      	LDI  R26,1
000084 30a0      	CPI  R26,LOW(0x0)
000085 f411      	BRNE _0xA
000086 fc27      	SBRC R2,7
000087 c001      	RJMP _0xB
                 _0xA:
000088 c003      	RJMP _0x9
                 _0xB:
                 ; 0000 0095             secuencia[cuenta]= 0x01;
000089 d103      	RCALL SUBOPT_0x0
00008a e0a1      	LDI  R26,LOW(1)
00008b d106      	RCALL SUBOPT_0x1
                 ; 0000 0096             cuenta++;
                 ; 0000 0097             delay_ms(40);
                 ; 0000 0098         }
                 ; 0000 0099         if ((botona_Adelante==1)&&(botonp_Adelante==0))
                 _0x9:
00008c fe20      	SBRS R2,0
00008d c005      	RJMP _0xD
00008e e0a0      	LDI  R26,0
00008f fc27      	SBRC R2,7
000090 e0a1      	LDI  R26,1
000091 30a0      	CPI  R26,LOW(0x0)
000092 f009      	BREQ _0xE
                 _0xD:
000093 c001      	RJMP _0xC
                 _0xE:
                 ; 0000 009A             delay_ms(40);
000094 d102      	RCALL SUBOPT_0x2
                 ; 0000 009B         botonp_Adelante = botona_Adelante;
                 _0xC:
000095 fa20      	BST  R2,0
000096 f827      	BLD  R2,7
                 ; 0000 009C 
                 ; 0000 009D         //****************** Presionar el boton Atras --> 0x02
                 ; 0000 009E         if (boton_Atras==0)
000097 99b1      	SBIC 0x16,1
000098 c002      	RJMP _0xF
                 ; 0000 009F             botona_Atras=0;
000099 94e8      	CLT
00009a c001      	RJMP _0x79
                 ; 0000 00A0         else
                 _0xF:
                 ; 0000 00A1             botona_Atras=1;
00009b 9468      	SET
                 _0x79:
00009c f821      	BLD  R2,1
                 ; 0000 00A2         if ((botona_Atras==0)&&(botonp_Atras==1)){
00009d e0a0      	LDI  R26,0
00009e fc21      	SBRC R2,1
00009f e0a1      	LDI  R26,1
0000a0 30a0      	CPI  R26,LOW(0x0)
0000a1 f411      	BRNE _0x12
0000a2 fc30      	SBRC R3,0
0000a3 c001      	RJMP _0x13
                 _0x12:
0000a4 c003      	RJMP _0x11
                 _0x13:
                 ; 0000 00A3             secuencia[cuenta]= 0x02;
0000a5 d0e7      	RCALL SUBOPT_0x0
0000a6 e0a2      	LDI  R26,LOW(2)
0000a7 d0ea      	RCALL SUBOPT_0x1
                 ; 0000 00A4             cuenta++;
                 ; 0000 00A5             delay_ms(40);
                 ; 0000 00A6         }
                 ; 0000 00A7         if ((botona_Atras==1)&&(botonp_Atras==0))
                 _0x11:
0000a8 fe21      	SBRS R2,1
0000a9 c005      	RJMP _0x15
0000aa e0a0      	LDI  R26,0
0000ab fc30      	SBRC R3,0
0000ac e0a1      	LDI  R26,1
0000ad 30a0      	CPI  R26,LOW(0x0)
0000ae f009      	BREQ _0x16
                 _0x15:
0000af c001      	RJMP _0x14
                 _0x16:
                 ; 0000 00A8             delay_ms(40);
0000b0 d0e6      	RCALL SUBOPT_0x2
                 ; 0000 00A9         botonp_Atras = botona_Atras;
                 _0x14:
0000b1 fa21      	BST  R2,1
0000b2 f830      	BLD  R3,0
                 ; 0000 00AA 
                 ; 0000 00AB         //****************** Presionar el boton Derecha --> 0x03
                 ; 0000 00AC         if (boton_Derecha==0)
0000b3 99b2      	SBIC 0x16,2
0000b4 c002      	RJMP _0x17
                 ; 0000 00AD             botona_Derecha=0;
0000b5 94e8      	CLT
0000b6 c001      	RJMP _0x7A
                 ; 0000 00AE         else
                 _0x17:
                 ; 0000 00AF             botona_Derecha=1;
0000b7 9468      	SET
                 _0x7A:
0000b8 f822      	BLD  R2,2
                 ; 0000 00B0         if ((botona_Derecha==0)&&(botonp_Derecha==1)){
0000b9 e0a0      	LDI  R26,0
0000ba fc22      	SBRC R2,2
0000bb e0a1      	LDI  R26,1
0000bc 30a0      	CPI  R26,LOW(0x0)
0000bd f411      	BRNE _0x1A
0000be fc31      	SBRC R3,1
0000bf c001      	RJMP _0x1B
                 _0x1A:
0000c0 c003      	RJMP _0x19
                 _0x1B:
                 ; 0000 00B1             secuencia[cuenta]= 0x03;
0000c1 d0cb      	RCALL SUBOPT_0x0
0000c2 e0a3      	LDI  R26,LOW(3)
0000c3 d0ce      	RCALL SUBOPT_0x1
                 ; 0000 00B2             cuenta++;
                 ; 0000 00B3             delay_ms(40);
                 ; 0000 00B4         }
                 ; 0000 00B5         if ((botona_Derecha==1)&&(botonp_Derecha==0))
                 _0x19:
0000c4 fe22      	SBRS R2,2
0000c5 c005      	RJMP _0x1D
0000c6 e0a0      	LDI  R26,0
0000c7 fc31      	SBRC R3,1
0000c8 e0a1      	LDI  R26,1
0000c9 30a0      	CPI  R26,LOW(0x0)
0000ca f009      	BREQ _0x1E
                 _0x1D:
0000cb c001      	RJMP _0x1C
                 _0x1E:
                 ; 0000 00B6             delay_ms(40);
0000cc d0ca      	RCALL SUBOPT_0x2
                 ; 0000 00B7         botonp_Derecha = botona_Derecha;
                 _0x1C:
0000cd fa22      	BST  R2,2
0000ce f831      	BLD  R3,1
                 ; 0000 00B8 
                 ; 0000 00B9       //********************* Presionar el boton Izquierda --> 0x04
                 ; 0000 00BA         if (boton_Izquierda==0)
0000cf 99b3      	SBIC 0x16,3
0000d0 c002      	RJMP _0x1F
                 ; 0000 00BB             botona_Izquierda=0;
0000d1 94e8      	CLT
0000d2 c001      	RJMP _0x7B
                 ; 0000 00BC         else
                 _0x1F:
                 ; 0000 00BD             botona_Izquierda=1;
0000d3 9468      	SET
                 _0x7B:
0000d4 f823      	BLD  R2,3
                 ; 0000 00BE         if ((botona_Izquierda==0)&&(botonp_Izquierda==1)){
0000d5 e0a0      	LDI  R26,0
0000d6 fc23      	SBRC R2,3
0000d7 e0a1      	LDI  R26,1
0000d8 30a0      	CPI  R26,LOW(0x0)
0000d9 f411      	BRNE _0x22
0000da fc32      	SBRC R3,2
0000db c001      	RJMP _0x23
                 _0x22:
0000dc c003      	RJMP _0x21
                 _0x23:
                 ; 0000 00BF             secuencia[cuenta]= 0x04;
0000dd d0af      	RCALL SUBOPT_0x0
0000de e0a4      	LDI  R26,LOW(4)
0000df d0b2      	RCALL SUBOPT_0x1
                 ; 0000 00C0             cuenta++;
                 ; 0000 00C1             delay_ms(40);
                 ; 0000 00C2         }
                 ; 0000 00C3         if ((botona_Izquierda==1)&&(botonp_Izquierda==0))
                 _0x21:
0000e0 fe23      	SBRS R2,3
0000e1 c005      	RJMP _0x25
0000e2 e0a0      	LDI  R26,0
0000e3 fc32      	SBRC R3,2
0000e4 e0a1      	LDI  R26,1
0000e5 30a0      	CPI  R26,LOW(0x0)
0000e6 f009      	BREQ _0x26
                 _0x25:
0000e7 c001      	RJMP _0x24
                 _0x26:
                 ; 0000 00C4             delay_ms(40);
0000e8 d0ae      	RCALL SUBOPT_0x2
                 ; 0000 00C5         botonp_Izquierda = botona_Izquierda;
                 _0x24:
0000e9 fa23      	BST  R2,3
0000ea f832      	BLD  R3,2
                 ; 0000 00C6 
                 ; 0000 00C7         //****************** Control del contador *********
                 ; 0000 00C8         if (cuenta == 10){
0000eb e0ea      	LDI  R30,LOW(10)
0000ec 15e5      	CP   R30,R5
0000ed f409      	BRNE _0x27
                 ; 0000 00C9             cuenta = 0;
0000ee 2455      	CLR  R5
                 ; 0000 00CA         }
                 ; 0000 00CB 
                 ; 0000 00CC         //***************** Presionar el boton Start
                 ; 0000 00CD         if (boton_Start == 0)
                 _0x27:
0000ef 99b4      	SBIC 0x16,4
0000f0 c002      	RJMP _0x28
                 ; 0000 00CE             botona_Start=0;
0000f1 94e8      	CLT
0000f2 c001      	RJMP _0x7C
                 ; 0000 00CF         else
                 _0x28:
                 ; 0000 00D0             botona_Start=1;
0000f3 9468      	SET
                 _0x7C:
0000f4 f824      	BLD  R2,4
                 ; 0000 00D1         if ( (botonp_Start==1) && (botona_Start==0) ){
0000f5 fe33      	SBRS R3,3
0000f6 c005      	RJMP _0x2B
0000f7 e0a0      	LDI  R26,0
0000f8 fc24      	SBRC R2,4
0000f9 e0a1      	LDI  R26,1
0000fa 30a0      	CPI  R26,LOW(0x0)
0000fb f009      	BREQ _0x2C
                 _0x2B:
0000fc c003      	RJMP _0x2A
                 _0x2C:
                 ; 0000 00D2             Inicio = 1;
0000fd e0e1      	LDI  R30,LOW(1)
0000fe 2e4e      	MOV  R4,R30
                 ; 0000 00D3             delay_ms(40);
0000ff d097      	RCALL SUBOPT_0x2
                 ; 0000 00D4         }
                 ; 0000 00D5         if ( (botonp_Start==0) && (botona_Start==1) )
                 _0x2A:
000100 e0a0      	LDI  R26,0
000101 fc33      	SBRC R3,3
000102 e0a1      	LDI  R26,1
000103 30a0      	CPI  R26,LOW(0x0)
000104 f411      	BRNE _0x2E
000105 fc24      	SBRC R2,4
000106 c001      	RJMP _0x2F
                 _0x2E:
000107 c001      	RJMP _0x2D
                 _0x2F:
                 ; 0000 00D6             delay_ms(40);
000108 d08e      	RCALL SUBOPT_0x2
                 ; 0000 00D7         botonp_Start = botona_Start;
                 _0x2D:
000109 fa24      	BST  R2,4
00010a f833      	BLD  R3,3
                 ; 0000 00D8     }
                 ; 0000 00D9     else {
00010b c050      	RJMP _0x30
                 _0x6:
                 ; 0000 00DA         //Activar motor Adelante
                 ; 0000 00DB         if(secuencia[i] == 0x01){
00010c d08d      	RCALL SUBOPT_0x3
00010d 30a1      	CPI  R26,LOW(0x1)
00010e f441      	BRNE _0x31
                 ; 0000 00DC             PORTD.0 = 1;
00010f 9a90      	SBI  0x12,0
                 ; 0000 00DD             PORTD.1 = 1;
000110 9a91      	SBI  0x12,1
                 ; 0000 00DE             PORTD.2 = 0;
000111 9892      	CBI  0x12,2
                 ; 0000 00DF             PORTD.3 = 0;
000112 9893      	CBI  0x12,3
                 ; 0000 00E0             i++;
000113 9493      	INC  R9
                 ; 0000 00E1             delay_ms(500);
000114 efa4      	LDI  R26,LOW(500)
000115 e0b1      	LDI  R27,HIGH(500)
000116 c01e      	RJMP _0x7D
                 ; 0000 00E2         }
                 ; 0000 00E3 
                 ; 0000 00E4         //Activar motor Atras
                 ; 0000 00E5         else if(secuencia[i] == 0x02){
                 _0x31:
000117 d082      	RCALL SUBOPT_0x3
000118 30a2      	CPI  R26,LOW(0x2)
000119 f429      	BRNE _0x3B
                 ; 0000 00E6             PORTD.0 = 0;
00011a 9890      	CBI  0x12,0
                 ; 0000 00E7             PORTD.1 = 0;
00011b 9891      	CBI  0x12,1
                 ; 0000 00E8             PORTD.2 = 1;
00011c 9a92      	SBI  0x12,2
                 ; 0000 00E9             PORTD.3 = 1;
00011d 9a93      	SBI  0x12,3
                 ; 0000 00EA             i++;
00011e c013      	RJMP _0x7E
                 ; 0000 00EB             delay_ms(1000);
                 ; 0000 00EC         }
                 ; 0000 00ED 
                 ; 0000 00EE         //Activar motor Derecha
                 ; 0000 00EF         else if(secuencia[i] == 0x03){
                 _0x3B:
00011f d07a      	RCALL SUBOPT_0x3
000120 30a3      	CPI  R26,LOW(0x3)
000121 f429      	BRNE _0x45
                 ; 0000 00F0             PORTD.0 = 1;
000122 9a90      	SBI  0x12,0
                 ; 0000 00F1             PORTD.1 = 0;
000123 9891      	CBI  0x12,1
                 ; 0000 00F2             PORTD.2 = 0;
000124 9892      	CBI  0x12,2
                 ; 0000 00F3             PORTD.3 = 1;
000125 9a93      	SBI  0x12,3
                 ; 0000 00F4             i++;
000126 c00b      	RJMP _0x7E
                 ; 0000 00F5             delay_ms(1000);
                 ; 0000 00F6         }
                 ; 0000 00F7 
                 ; 0000 00F8         //Activar motor Izquierda
                 ; 0000 00F9         else if(secuencia[i] == 0x04){
                 _0x45:
000127 d072      	RCALL SUBOPT_0x3
000128 30a4      	CPI  R26,LOW(0x4)
000129 f421      	BRNE _0x4F
                 ; 0000 00FA             PORTD.0 = 0;
00012a 9890      	CBI  0x12,0
                 ; 0000 00FB             PORTD.1 = 1;
00012b 9a91      	SBI  0x12,1
                 ; 0000 00FC             PORTD.2 = 1;
00012c 9a92      	SBI  0x12,2
                 ; 0000 00FD             PORTD.3 = 0;
00012d c003      	RJMP _0x7F
                 ; 0000 00FE             i++;
                 ; 0000 00FF             delay_ms(1000);
                 ; 0000 0100         }
                 ; 0000 0101 
                 ; 0000 0102         else {
                 _0x4F:
                 ; 0000 0103             PORTD.0 = 0;
00012e 9890      	CBI  0x12,0
                 ; 0000 0104             PORTD.1 = 0;
00012f 9891      	CBI  0x12,1
                 ; 0000 0105             PORTD.2 = 0;
000130 9892      	CBI  0x12,2
                 ; 0000 0106             PORTD.3 = 0;
                 _0x7F:
000131 9893      	CBI  0x12,3
                 ; 0000 0107             i++;
                 _0x7E:
000132 9493      	INC  R9
                 ; 0000 0108             delay_ms(1000);
000133 eea8      	LDI  R26,LOW(1000)
000134 e0b3      	LDI  R27,HIGH(1000)
                 _0x7D:
000135 d06a      	RCALL _delay_ms
                 ; 0000 0109         }
                 ; 0000 010A 
                 ; 0000 010B         //Control del contador
                 ; 0000 010C         if( i == 10 ){
000136 e0ea      	LDI  R30,LOW(10)
000137 15e9      	CP   R30,R9
000138 f411      	BRNE _0x61
                 ; 0000 010D             i = 0;
000139 2499      	CLR  R9
                 ; 0000 010E             Inicio = 0;
00013a 2444      	CLR  R4
                 ; 0000 010F         }
                 ; 0000 0110 
                 ; 0000 0111         // Presionar el boton Pausa
                 ; 0000 0112         if (boton_Pause==0)
                 _0x61:
00013b 99b5      	SBIC 0x16,5
00013c c002      	RJMP _0x62
                 ; 0000 0113             botona_Pause=0;
00013d 94e8      	CLT
00013e c001      	RJMP _0x80
                 ; 0000 0114         else
                 _0x62:
                 ; 0000 0115             botona_Pause=1;
00013f 9468      	SET
                 _0x80:
000140 f825      	BLD  R2,5
                 ; 0000 0116 
                 ; 0000 0117         if ((botona_Pause==0)&&(botonp_Pause==1)){
000141 e0a0      	LDI  R26,0
000142 fc25      	SBRC R2,5
000143 e0a1      	LDI  R26,1
000144 30a0      	CPI  R26,LOW(0x0)
000145 f411      	BRNE _0x65
000146 fc34      	SBRC R3,4
000147 c001      	RJMP _0x66
                 _0x65:
000148 c003      	RJMP _0x64
                 _0x66:
                 ; 0000 0118             Pausa = 1;
000149 e0e1      	LDI  R30,LOW(1)
00014a 2e6e      	MOV  R6,R30
                 ; 0000 0119             delay_ms(40);
00014b d04b      	RCALL SUBOPT_0x2
                 ; 0000 011A         }
                 ; 0000 011B         if ((botona_Pause==1)&&(botonp_Pause==0))
                 _0x64:
00014c fe25      	SBRS R2,5
00014d c005      	RJMP _0x68
00014e e0a0      	LDI  R26,0
00014f fc34      	SBRC R3,4
000150 e0a1      	LDI  R26,1
000151 30a0      	CPI  R26,LOW(0x0)
000152 f009      	BREQ _0x69
                 _0x68:
000153 c001      	RJMP _0x67
                 _0x69:
                 ; 0000 011C             delay_ms(40);
000154 d042      	RCALL SUBOPT_0x2
                 ; 0000 011D 
                 ; 0000 011E         botonp_Pause = botona_Pause;
                 _0x67:
000155 fa25      	BST  R2,5
000156 f834      	BLD  R3,4
                 ; 0000 011F 
                 ; 0000 0120         if(Pausa == 1){
000157 e0e1      	LDI  R30,LOW(1)
000158 15e6      	CP   R30,R6
000159 f411      	BRNE _0x6A
                 ; 0000 0121             Inicio = 0;
00015a 2444      	CLR  R4
                 ; 0000 0122             Pausa = 0;
00015b 2466      	CLR  R6
                 ; 0000 0123         }
                 ; 0000 0124     }
                 _0x6A:
                 _0x30:
                 ; 0000 0125 
                 ; 0000 0126     // Presionar el boton Clear
                 ; 0000 0127     if (boton_Clear==0)
00015c 99b6      	SBIC 0x16,6
00015d c002      	RJMP _0x6B
                 ; 0000 0128         botona_Clear=0;
00015e 94e8      	CLT
00015f c001      	RJMP _0x81
                 ; 0000 0129     else
                 _0x6B:
                 ; 0000 012A         botona_Clear=1;
000160 9468      	SET
                 _0x81:
000161 f826      	BLD  R2,6
                 ; 0000 012B 
                 ; 0000 012C     if ((botona_Clear==0)&&(botonp_Clear==1)){
000162 e0a0      	LDI  R26,0
000163 fc26      	SBRC R2,6
000164 e0a1      	LDI  R26,1
000165 30a0      	CPI  R26,LOW(0x0)
000166 f411      	BRNE _0x6E
000167 fc35      	SBRC R3,5
000168 c001      	RJMP _0x6F
                 _0x6E:
000169 c003      	RJMP _0x6D
                 _0x6F:
                 ; 0000 012D         Clear= 1;
00016a e0e1      	LDI  R30,LOW(1)
00016b 2e7e      	MOV  R7,R30
                 ; 0000 012E         delay_ms(40);
00016c d02a      	RCALL SUBOPT_0x2
                 ; 0000 012F     }
                 ; 0000 0130     if ((botona_Clear==1)&&(botonp_Clear==0))
                 _0x6D:
00016d fe26      	SBRS R2,6
00016e c005      	RJMP _0x71
00016f e0a0      	LDI  R26,0
000170 fc35      	SBRC R3,5
000171 e0a1      	LDI  R26,1
000172 30a0      	CPI  R26,LOW(0x0)
000173 f009      	BREQ _0x72
                 _0x71:
000174 c001      	RJMP _0x70
                 _0x72:
                 ; 0000 0131         delay_ms(40);
000175 d021      	RCALL SUBOPT_0x2
                 ; 0000 0132     botonp_Clear = botona_Clear;
                 _0x70:
000176 fa26      	BST  R2,6
000177 f835      	BLD  R3,5
                 ; 0000 0133 
                 ; 0000 0134     if(Clear == 1){
000178 e0e1      	LDI  R30,LOW(1)
000179 15e7      	CP   R30,R7
00017a f481      	BRNE _0x73
                 ; 0000 0135         for( j = 0; j<10; j++){
00017b 2488      	CLR  R8
                 _0x75:
00017c e0ea      	LDI  R30,LOW(10)
00017d 168e      	CP   R8,R30
00017e f440      	BRSH _0x76
                 ; 0000 0136             secuencia [j]=0x00;
00017f 2de8      	MOV  R30,R8
000180 e0f0      	LDI  R31,0
000181 52e0      	SUBI R30,LOW(-_secuencia)
000182 4fff      	SBCI R31,HIGH(-_secuencia)
000183 e0a0      	LDI  R26,LOW(0)
000184 83a0      	STD  Z+0,R26
                 ; 0000 0137         }
000185 9483      	INC  R8
000186 cff5      	RJMP _0x75
                 _0x76:
                 ; 0000 0138         cuenta=0;
000187 2455      	CLR  R5
                 ; 0000 0139         i = 0;
000188 2499      	CLR  R9
                 ; 0000 013A         Clear = 0;
000189 2477      	CLR  R7
                 ; 0000 013B         Inicio = 0;
00018a 2444      	CLR  R4
                 ; 0000 013C     }
                 ; 0000 013D }
                 _0x73:
00018b ceec      	RJMP _0x3
                 ; 0000 013E }
                 _0x77:
00018c cfff      	RJMP _0x77
                 ; .FEND
                 
                 	.DSEG
                 _secuencia:
0000e0           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
00018d 2de5      	MOV  R30,R5
00018e e0f0      	LDI  R31,0
00018f 52e0      	SUBI R30,LOW(-_secuencia)
000190 4fff      	SBCI R31,HIGH(-_secuencia)
000191 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000192 83a0      	STD  Z+0,R26
000193 9453      	INC  R5
000194 e2a8      	LDI  R26,LOW(40)
000195 e0b0      	LDI  R27,0
000196 c009      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x2:
000197 e2a8      	LDI  R26,LOW(40)
000198 e0b0      	LDI  R27,0
000199 c006      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3:
00019a 2de9      	MOV  R30,R9
00019b e0f0      	LDI  R31,0
00019c 52e0      	SUBI R30,LOW(-_secuencia)
00019d 4fff      	SBCI R31,HIGH(-_secuencia)
00019e 81a0      	LD   R26,Z
00019f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001a0 9610      	adiw r26,0
0001a1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001a2 ef8a     +LDI R24 , LOW ( 0xFA )
0001a3 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0001a6 95a8      	wdr
0001a7 9711      	sbiw r26,1
0001a8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a9 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :   4 r1 :   1 r2 :  31 r3 :  18 r4 :   5 r5 :   5 r6 :   3 r7 :   3 
r8 :   4 r9 :   6 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  63 r27:   6 r28:   1 r29:   1 r30:  78 r31:  11 
x  :   3 y  :   0 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  14 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  10 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   7 cbi   :  11 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  12 
cls   :   0 clt   :   7 clv   :   0 clz   :   0 com   :   0 cp    :   5 
cpc   :   0 cpi   :  18 cpse  :   0 dec   :   1 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 
inc   :   4 ld    :   1 ldd   :   0 ldi   :  74 lds   :   0 lpm   :   7 
lsl   :   0 lsr   :   0 mov   :   6 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  42 
pop   :   0 push  :   0 rcall :  23 ret   :   3 reti  :   0 rjmp  :  76 
rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 sbi   :   8 sbic  :   7 
sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :  21 sbrs  :   7 sec   :   0 
seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   7 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   2 
sts   :   0 sub   :   0 subi  :   3 swap  :   0 tst   :   1 wdr   :   1 

Instructions used: 35 out of 114 (30.7%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000354    830     22    852    8192  10.4%
[.dseg] 0x000060 0x0000ea      0     10     10     512   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
