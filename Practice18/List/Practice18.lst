
AVRASM ver. 2.1.30  C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm Sat Nov 09 20:37:07 2019

C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1070): warning: Register r4 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1071): warning: Register r7 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1072): warning: Register r6 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1073): warning: Register r9 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1074): warning: Register r8 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1075): warning: Register r11 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1076): warning: Register r10 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1077): warning: Register r13 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1078): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.60 Evaluation
                 ;(C) Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _tem=R4
                 	.DEF _unidades=R7
                 	.DEF _decenas=R6
                 	.DEF _decimas=R9
                 	.DEF _cn=R8
                 	.DEF _seg=R11
                 	.DEF _min=R10
                 	.DEF _hor=R13
                 	.DEF _dia=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c032      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000015 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000016 0000
000017 0019      	.DB  0x0,0x0,0x19,0x0
                 
                 _0x3:
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1118): warning: .cseg .db misalignment - padding zero byte
000018 000a      	.DB  0xA
                 _0x4:
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1120): warning: .cseg .db misalignment - padding zero byte
000019 0013      	.DB  0x13
                 _0x5:
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1122): warning: .cseg .db misalignment - padding zero byte
00001a 0061      	.DB  0x61
                 _0x6:
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice18\List\Practice18.asm(1124): warning: .cseg .db misalignment - padding zero byte
00001b 0030      	.DB  0x30
                 _0x0:
00001c 5345
00001d 4f43
00001e 004d      	.DB  0x45,0x53,0x43,0x4F,0x4D,0x0
                 _0x2000003:
00001f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000020 0001      	.DW  0x01
000021 0002      	.DW  0x02
000022 002a      	.DW  __REG_BIT_VARS*2
                 
000023 0004      	.DW  0x04
000024 000a      	.DW  0x0A
000025 002c      	.DW  __REG_VARS*2
                 
000026 0001      	.DW  0x01
000027 00e4      	.DW  _mes
000028 0030      	.DW  _0x3*2
                 
000029 0001      	.DW  0x01
00002a 00e6      	.DW  _ye
00002b 0032      	.DW  _0x4*2
                 
00002c 0001      	.DW  0x01
00002d 00e8      	.DW  _ar
00002e 0034      	.DW  _0x5*2
                 
00002f 0002      	.DW  0x02
000030 00ea      	.DW  __base_y_G100
000031 003e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003a e1f8      	LDI  R31,0x18
00003b bdf1      	OUT  WDTCR,R31
00003c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003d e08d      	LDI  R24,(14-2)+1
00003e e0a2      	LDI  R26,2
00003f 27bb      	CLR  R27
                 __CLEAR_REG:
000040 93ed      	ST   X+,R30
000041 958a      	DEC  R24
000042 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000043 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000044 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000045 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000046 93ed      	ST   X+,R30
000047 9701      	SBIW R24,1
000048 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000049 e4e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004a e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004b 9185      	LPM  R24,Z+
00004c 9195      	LPM  R25,Z+
00004d 9700      	SBIW R24,0
00004e f061      	BREQ __GLOBAL_INI_END
00004f 91a5      	LPM  R26,Z+
000050 91b5      	LPM  R27,Z+
000051 9005      	LPM  R0,Z+
000052 9015      	LPM  R1,Z+
000053 01bf      	MOVW R22,R30
000054 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000055 9005      	LPM  R0,Z+
000056 920d      	ST   X+,R0
000057 9701      	SBIW R24,1
000058 f7e1      	BRNE __GLOBAL_INI_LOOP
000059 01fb      	MOVW R30,R22
00005a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005c bfed      	OUT  SPL,R30
00005d e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005f eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000060 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000061 c00d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V2.60 Evaluation
                 ;Automatic Program Generator
                 ;© Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 09/11/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8535L
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 128
                 ;*******************************************************/
                 ;
                 ;#include <mega8535.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;
                 ;
                 ;#define cambio PIND.0
                 ;#define ha PIND.1
                 ;#define mm PIND.2
                 ;#define sd PIND.3
                 ;
                 ;float cel;
                 ;int tem;
                 ;bit btnp,btna;
                 ;unsigned char unidades,decenas,decimas,cn,seg=0,min=0,hor=0,dia=25,mes=10,change;
                 
                 	.DSEG
                 ;unsigned short ye=19,ar=97;
                 ;const char car=48; //codigo ascii
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (1<<ADLAR))
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0034 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0035 ADMUX=adc_input | ADC_VREF_TYPE;
000062 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000063 81e8      	LD   R30,Y
000064 66e0      	ORI  R30,LOW(0x60)
000065 b9e7      	OUT  0x7,R30
                 ; 0000 0036 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0037 delay_us(10);
                +
000066 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000067 958a     +DEC R24
000068 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=(1<<ADSC);
000069 9a36      	SBI  0x6,6
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & (1<<ADIF))==0);
                 _0x7:
00006a 9b34      	SBIS 0x6,4
00006b cffe      	RJMP _0x7
                 ; 0000 003C ADCSRA|=(1<<ADIF);
00006c 9a34      	SBI  0x6,4
                 ; 0000 003D return ADCH;
00006d b1e5      	IN   R30,0x5
00006e c1c1      	RJMP _0x2020001
                 ; 0000 003E }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0041 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0042 // Declare your local variables here
                 ; 0000 0043 
                 ; 0000 0044 // Input/Output Ports initialization
                 ; 0000 0045 // Port A initialization
                 ; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0047 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00006f e0e0      	LDI  R30,LOW(0)
000070 bbea      	OUT  0x1A,R30
                 ; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0049 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000071 bbeb      	OUT  0x1B,R30
                 ; 0000 004A 
                 ; 0000 004B // Port B initialization
                 ; 0000 004C // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 004D DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
000072 efef      	LDI  R30,LOW(255)
000073 bbe7      	OUT  0x17,R30
                 ; 0000 004E // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 004F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000074 e0e0      	LDI  R30,LOW(0)
000075 bbe8      	OUT  0x18,R30
                 ; 0000 0050 
                 ; 0000 0051 // Port C initialization
                 ; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0053 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000076 bbe4      	OUT  0x14,R30
                 ; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0055 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000077 bbe5      	OUT  0x15,R30
                 ; 0000 0056 
                 ; 0000 0057 // Port D initialization
                 ; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000078 bbe1      	OUT  0x11,R30
                 ; 0000 005A // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 005B PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
000079 efef      	LDI  R30,LOW(255)
00007a bbe2      	OUT  0x12,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 0 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: Timer 0 Stopped
                 ; 0000 0060 // Mode: Normal top=0xFF
                 ; 0000 0061 // OC0 output: Disconnected
                 ; 0000 0062 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00007b e0e0      	LDI  R30,LOW(0)
00007c bfe3      	OUT  0x33,R30
                 ; 0000 0063 TCNT0=0x00;
00007d bfe2      	OUT  0x32,R30
                 ; 0000 0064 OCR0=0x00;
00007e bfec      	OUT  0x3C,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 1 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: Timer1 Stopped
                 ; 0000 0069 // Mode: Normal top=0xFFFF
                 ; 0000 006A // OC1A output: Disconnected
                 ; 0000 006B // OC1B output: Disconnected
                 ; 0000 006C // Noise Canceler: Off
                 ; 0000 006D // Input Capture on Falling Edge
                 ; 0000 006E // Timer1 Overflow Interrupt: Off
                 ; 0000 006F // Input Capture Interrupt: Off
                 ; 0000 0070 // Compare A Match Interrupt: Off
                 ; 0000 0071 // Compare B Match Interrupt: Off
                 ; 0000 0072 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00007f bdef      	OUT  0x2F,R30
                 ; 0000 0073 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000080 bdee      	OUT  0x2E,R30
                 ; 0000 0074 TCNT1H=0x00;
000081 bded      	OUT  0x2D,R30
                 ; 0000 0075 TCNT1L=0x00;
000082 bdec      	OUT  0x2C,R30
                 ; 0000 0076 ICR1H=0x00;
000083 bde7      	OUT  0x27,R30
                 ; 0000 0077 ICR1L=0x00;
000084 bde6      	OUT  0x26,R30
                 ; 0000 0078 OCR1AH=0x00;
000085 bdeb      	OUT  0x2B,R30
                 ; 0000 0079 OCR1AL=0x00;
000086 bdea      	OUT  0x2A,R30
                 ; 0000 007A OCR1BH=0x00;
000087 bde9      	OUT  0x29,R30
                 ; 0000 007B OCR1BL=0x00;
000088 bde8      	OUT  0x28,R30
                 ; 0000 007C 
                 ; 0000 007D // Timer/Counter 2 initialization
                 ; 0000 007E // Clock source: System Clock
                 ; 0000 007F // Clock value: Timer2 Stopped
                 ; 0000 0080 // Mode: Normal top=0xFF
                 ; 0000 0081 // OC2 output: Disconnected
                 ; 0000 0082 ASSR=0<<AS2;
000089 bde2      	OUT  0x22,R30
                 ; 0000 0083 TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00008a bde5      	OUT  0x25,R30
                 ; 0000 0084 TCNT2=0x00;
00008b bde4      	OUT  0x24,R30
                 ; 0000 0085 OCR2=0x00;
00008c bde3      	OUT  0x23,R30
                 ; 0000 0086 
                 ; 0000 0087 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0088 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00008d bfe9      	OUT  0x39,R30
                 ; 0000 0089 
                 ; 0000 008A // External Interrupt(s) initialization
                 ; 0000 008B // INT0: Off
                 ; 0000 008C // INT1: Off
                 ; 0000 008D // INT2: Off
                 ; 0000 008E MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00008e bfe5      	OUT  0x35,R30
                 ; 0000 008F MCUCSR=(0<<ISC2);
00008f bfe4      	OUT  0x34,R30
                 ; 0000 0090 
                 ; 0000 0091 // USART initialization
                 ; 0000 0092 // USART disabled
                 ; 0000 0093 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000090 b9ea      	OUT  0xA,R30
                 ; 0000 0094 
                 ; 0000 0095 // Analog Comparator initialization
                 ; 0000 0096 // Analog Comparator: Off
                 ; 0000 0097 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000091 e8e0      	LDI  R30,LOW(128)
000092 b9e8      	OUT  0x8,R30
                 ; 0000 0098 
                 ; 0000 0099 // ADC initialization
                 ; 0000 009A // ADC Clock frequency: 500,000 kHz
                 ; 0000 009B // ADC Voltage Reference: AVCC pin
                 ; 0000 009C // ADC High Speed Mode: Off
                 ; 0000 009D // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 009E // Only the 8 most significant bits of
                 ; 0000 009F // the AD conversion result are used
                 ; 0000 00A0 ADMUX=ADC_VREF_TYPE;
000093 e6e0      	LDI  R30,LOW(96)
000094 b9e7      	OUT  0x7,R30
                 ; 0000 00A1 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000095 e8e1      	LDI  R30,LOW(129)
000096 b9e6      	OUT  0x6,R30
                 ; 0000 00A2 SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000097 e1e0      	LDI  R30,LOW(16)
000098 bfe0      	OUT  0x30,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // SPI initialization
                 ; 0000 00A5 // SPI disabled
                 ; 0000 00A6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000099 e0e0      	LDI  R30,LOW(0)
00009a b9ed      	OUT  0xD,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // TWI initialization
                 ; 0000 00A9 // TWI disabled
                 ; 0000 00AA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00009b bfe6      	OUT  0x36,R30
                 ; 0000 00AB 
                 ; 0000 00AC // Alphanumeric LCD initialization
                 ; 0000 00AD // Connections are specified in the
                 ; 0000 00AE // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00AF // RS - PORTB Bit 0
                 ; 0000 00B0 // RD - PORTB Bit 1
                 ; 0000 00B1 // EN - PORTB Bit 2
                 ; 0000 00B2 // D4 - PORTB Bit 4
                 ; 0000 00B3 // D5 - PORTB Bit 5
                 ; 0000 00B4 // D6 - PORTB Bit 6
                 ; 0000 00B5 // D7 - PORTB Bit 7
                 ; 0000 00B6 // Characters/line: 16
                 ; 0000 00B7 lcd_init(16);
00009c e1a0      	LDI  R26,LOW(16)
00009d d16a      	RCALL _lcd_init
                 ; 0000 00B8 
                 ; 0000 00B9 while (1)
                 _0xA:
                 ; 0000 00BA       {
                 ; 0000 00BB 
                 ; 0000 00BC             if(cambio==0)
00009e 9980      	SBIC 0x10,0
00009f c002      	RJMP _0xD
                 ; 0000 00BD 
                 ; 0000 00BE                 btna=0;
0000a0 94e8      	CLT
0000a1 c001      	RJMP _0x25
                 ; 0000 00BF                 else
                 _0xD:
                 ; 0000 00C0                 btna=1;
0000a2 9468      	SET
                 _0x25:
0000a3 f821      	BLD  R2,1
                 ; 0000 00C1             if((btnp==1)&&(btna==0)){
0000a4 fe20      	SBRS R2,0
0000a5 c005      	RJMP _0x10
0000a6 e0a0      	LDI  R26,0
0000a7 fc21      	SBRC R2,1
0000a8 e0a1      	LDI  R26,1
0000a9 30a0      	CPI  R26,LOW(0x0)
0000aa f009      	BREQ _0x11
                 _0x10:
0000ab c009      	RJMP _0xF
                 _0x11:
                 ; 0000 00C2 
                 ; 0000 00C3             if(change==0){
0000ac 91e0 00e5 	LDS  R30,_change
0000ae 30e0      	CPI  R30,0
0000af f411      	BRNE _0x12
                 ; 0000 00C4 
                 ; 0000 00C5             change=1;
0000b0 e0e1      	LDI  R30,LOW(1)
0000b1 c001      	RJMP _0x26
                 ; 0000 00C6             }
                 ; 0000 00C7               else{
                 _0x12:
                 ; 0000 00C8               change=0;
0000b2 e0e0      	LDI  R30,LOW(0)
                 _0x26:
0000b3 93e0 00e5 	STS  _change,R30
                 ; 0000 00C9               }
                 ; 0000 00CA             }
                 ; 0000 00CB             btnp=btna;
                 _0xF:
0000b5 fa21      	BST  R2,1
0000b6 f820      	BLD  R2,0
                 ; 0000 00CC 
                 ; 0000 00CD 
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0           lcd_gotoxy(11,0);
0000b7 e0eb      	LDI  R30,LOW(11)
0000b8 d179      	RCALL SUBOPT_0x0
                 ; 0000 00D1           lcd_putsf("ESCOM");
                +
0000b9 e3a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000ba e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000bb d139      	RCALL _lcd_putsf
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4           cn=read_adc(0);
0000bc e0a0      	LDI  R26,LOW(0)
0000bd dfa4      	RCALL _read_adc
0000be 2e8e      	MOV  R8,R30
                 ; 0000 00D5           cel=cn*1.45;
0000bf 2de8      	MOV  R30,R8
0000c0 e0f0      	LDI  R31,0
0000c1 d2f2      	RCALL __CWD1
0000c2 d249      	RCALL __CDF1
                +
0000c3 e9aa     +LDI R26 , LOW ( 0x3FB9999A )
0000c4 e9b9     +LDI R27 , HIGH ( 0x3FB9999A )
0000c5 eb89     +LDI R24 , BYTE3 ( 0x3FB9999A )
0000c6 e39f     +LDI R25 , BYTE4 ( 0x3FB9999A )
                 	__GETD2N 0x3FB9999A
0000c7 d272      	RCALL __MULF12
0000c8 d16c      	RCALL SUBOPT_0x1
                 ; 0000 00D6           if(cel>99)
0000c9 d174      	RCALL SUBOPT_0x2
0000ca d17c      	RCALL SUBOPT_0x3
0000cb d2bc      	RCALL __CMPF12
0000cc f009      	BREQ PC+2
0000cd f408      	BRCC PC+2
0000ce c002      	RJMP _0x14
                 ; 0000 00D7           cel=99;
0000cf d177      	RCALL SUBOPT_0x3
0000d0 d164      	RCALL SUBOPT_0x1
                 ; 0000 00D8           tem=cel*10;
                 _0x14:
0000d1 d16c      	RCALL SUBOPT_0x2
                +
0000d2 e0e0     +LDI R30 , LOW ( 0x41200000 )
0000d3 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0000d4 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0000d5 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0000d6 d263      	RCALL __MULF12
0000d7 d1fd      	RCALL __CFD1
0000d8 012f      	MOVW R4,R30
                 ; 0000 00D9           decenas=tem/100;
0000d9 01d2      	MOVW R26,R4
0000da e6e4      	LDI  R30,LOW(100)
0000db e0f0      	LDI  R31,HIGH(100)
0000dc d2ef      	RCALL __DIVW21
0000dd 2e6e      	MOV  R6,R30
                 ; 0000 00DA           tem%=100;
0000de 01d2      	MOVW R26,R4
0000df e6e4      	LDI  R30,LOW(100)
0000e0 e0f0      	LDI  R31,HIGH(100)
0000e1 d2f2      	RCALL __MODW21
0000e2 012f      	MOVW R4,R30
                 ; 0000 00DB           decimas=tem%10;
0000e3 01d2      	MOVW R26,R4
0000e4 d167      	RCALL SUBOPT_0x4
0000e5 d2ee      	RCALL __MODW21
0000e6 2e9e      	MOV  R9,R30
                 ; 0000 00DC           unidades=tem/10;
0000e7 01d2      	MOVW R26,R4
0000e8 d166      	RCALL SUBOPT_0x5
0000e9 2e7e      	MOV  R7,R30
                 ; 0000 00DD 
                 ; 0000 00DE 
                 ; 0000 00DF           lcd_gotoxy(10,1);
0000ea e0ea      	LDI  R30,LOW(10)
0000eb d166      	RCALL SUBOPT_0x6
                 ; 0000 00E0           lcd_putchar(decenas+car);
0000ec 2da6      	MOV  R26,R6
0000ed 5da0      	SUBI R26,-LOW(48)
0000ee d0e6      	RCALL _lcd_putchar
                 ; 0000 00E1           lcd_gotoxy(11,1);
0000ef e0eb      	LDI  R30,LOW(11)
0000f0 d161      	RCALL SUBOPT_0x6
                 ; 0000 00E2           lcd_putchar(unidades+car);
0000f1 2da7      	MOV  R26,R7
0000f2 5da0      	SUBI R26,-LOW(48)
0000f3 d0e1      	RCALL _lcd_putchar
                 ; 0000 00E3           lcd_gotoxy(12,1);
0000f4 e0ec      	LDI  R30,LOW(12)
0000f5 d15c      	RCALL SUBOPT_0x6
                 ; 0000 00E4           lcd_putchar('.');
0000f6 e2ae      	LDI  R26,LOW(46)
0000f7 d0dd      	RCALL _lcd_putchar
                 ; 0000 00E5           lcd_gotoxy(13,1);
0000f8 e0ed      	LDI  R30,LOW(13)
0000f9 d158      	RCALL SUBOPT_0x6
                 ; 0000 00E6           lcd_putchar(decimas+car);
0000fa 2da9      	MOV  R26,R9
0000fb 5da0      	SUBI R26,-LOW(48)
0000fc d0d8      	RCALL _lcd_putchar
                 ; 0000 00E7 
                 ; 0000 00E8           lcd_gotoxy(14,1);
0000fd e0ee      	LDI  R30,LOW(14)
0000fe d153      	RCALL SUBOPT_0x6
                 ; 0000 00E9           lcd_putchar(car+175);
0000ff edaf      	LDI  R26,LOW(223)
000100 d0d4      	RCALL _lcd_putchar
                 ; 0000 00EA           lcd_gotoxy(15,1);
000101 e0ef      	LDI  R30,LOW(15)
000102 d14f      	RCALL SUBOPT_0x6
                 ; 0000 00EB           lcd_putchar('C');
000103 e4a3      	LDI  R26,LOW(67)
000104 d0d0      	RCALL _lcd_putchar
                 ; 0000 00EC           /////////////////////reloj en mov////////////////////////////
                 ; 0000 00ED           if(change==1){
000105 91a0 00e5 	LDS  R26,_change
000107 30a1      	CPI  R26,LOW(0x1)
000108 f469      	BRNE _0x15
                 ; 0000 00EE             if(ha==0){
000109 9981      	SBIC 0x10,1
00010a c002      	RJMP _0x16
                 ; 0000 00EF             hor++;
00010b 94d3      	INC  R13
                 ; 0000 00F0             delay_ms(300);
00010c d148      	RCALL SUBOPT_0x7
                 ; 0000 00F1             }
                 ; 0000 00F2             if(mm==0){
                 _0x16:
00010d 9982      	SBIC 0x10,2
00010e c002      	RJMP _0x17
                 ; 0000 00F3             min++;
00010f 94a3      	INC  R10
                 ; 0000 00F4             delay_ms(300);
000110 d144      	RCALL SUBOPT_0x7
                 ; 0000 00F5             }
                 ; 0000 00F6             if(sd==0){
                 _0x17:
000111 9983      	SBIC 0x10,3
000112 c002      	RJMP _0x18
                 ; 0000 00F7             seg++;
000113 94b3      	INC  R11
                 ; 0000 00F8             delay_ms(300);
000114 d140      	RCALL SUBOPT_0x7
                 ; 0000 00F9             }
                 ; 0000 00FA           }else{
                 _0x18:
000115 c00f      	RJMP _0x19
                 _0x15:
                 ; 0000 00FB             if(ha==0){
000116 9981      	SBIC 0x10,1
000117 c005      	RJMP _0x1A
                 ; 0000 00FC             ar++;
000118 d13f      	RCALL SUBOPT_0x8
                 ; 0000 00FD             if(ar>99){
000119 d146      	RCALL SUBOPT_0x9
00011a f008      	BRLO _0x1B
                 ; 0000 00FE             ye++;
00011b d14c      	RCALL SUBOPT_0xA
                 ; 0000 00FF             ar=0;
                 ; 0000 0100             }
                 ; 0000 0101             delay_ms(300);
                 _0x1B:
00011c d138      	RCALL SUBOPT_0x7
                 ; 0000 0102             }
                 ; 0000 0103             if(mm==0){
                 _0x1A:
00011d 9982      	SBIC 0x10,2
00011e c002      	RJMP _0x1C
                 ; 0000 0104             mes++;
00011f d155      	RCALL SUBOPT_0xB
                 ; 0000 0105             delay_ms(300);
000120 d134      	RCALL SUBOPT_0x7
                 ; 0000 0106             }
                 ; 0000 0107             if(sd==0){
                 _0x1C:
000121 9983      	SBIC 0x10,3
000122 c002      	RJMP _0x1D
                 ; 0000 0108             dia++;
000123 94c3      	INC  R12
                 ; 0000 0109             delay_ms(300);
000124 d130      	RCALL SUBOPT_0x7
                 ; 0000 010A             }
                 ; 0000 010B           }
                 _0x1D:
                 _0x19:
                 ; 0000 010C 
                 ; 0000 010D 
                 ; 0000 010E           delay_ms(300);
000125 d12f      	RCALL SUBOPT_0x7
                 ; 0000 010F           seg++;
000126 94b3      	INC  R11
                 ; 0000 0110           if(seg>59){
000127 e3eb      	LDI  R30,LOW(59)
000128 15eb      	CP   R30,R11
000129 f410      	BRSH _0x1E
                 ; 0000 0111 
                 ; 0000 0112           min++;
00012a 94a3      	INC  R10
                 ; 0000 0113           seg=0;
00012b 24bb      	CLR  R11
                 ; 0000 0114           }
                 ; 0000 0115           if(min>59){
                 _0x1E:
00012c e3eb      	LDI  R30,LOW(59)
00012d 15ea      	CP   R30,R10
00012e f418      	BRSH _0x1F
                 ; 0000 0116 
                 ; 0000 0117           hor++;
00012f 94d3      	INC  R13
                 ; 0000 0118           min=0;
000130 24aa      	CLR  R10
                 ; 0000 0119           seg=0;
000131 24bb      	CLR  R11
                 ; 0000 011A 
                 ; 0000 011B           }
                 ; 0000 011C           if(hor>23){
                 _0x1F:
000132 e1e7      	LDI  R30,LOW(23)
000133 15ed      	CP   R30,R13
000134 f420      	BRSH _0x20
                 ; 0000 011D 
                 ; 0000 011E           dia++;
000135 94c3      	INC  R12
                 ; 0000 011F           hor=0;
000136 24dd      	CLR  R13
                 ; 0000 0120           seg=0;
000137 24bb      	CLR  R11
                 ; 0000 0121           min=0;
000138 24aa      	CLR  R10
                 ; 0000 0122           }
                 ; 0000 0123 
                 ; 0000 0124           if(dia>31){
                 _0x20:
000139 e1ef      	LDI  R30,LOW(31)
00013a 15ec      	CP   R30,R12
00013b f410      	BRSH _0x21
                 ; 0000 0125           mes++;
00013c d138      	RCALL SUBOPT_0xB
                 ; 0000 0126           dia=0;
00013d 24cc      	CLR  R12
                 ; 0000 0127           }
                 ; 0000 0128           if(mes>12){
                 _0x21:
00013e 91a0 00e4 	LDS  R26,_mes
000140 30ad      	CPI  R26,LOW(0xD)
000141 f038      	BRLO _0x22
                 ; 0000 0129           ar++;
000142 d115      	RCALL SUBOPT_0x8
                 ; 0000 012A           mes=0;
000143 e0e0      	LDI  R30,LOW(0)
000144 93e0 00e4 	STS  _mes,R30
                 ; 0000 012B           if(ar>99){
000146 d119      	RCALL SUBOPT_0x9
000147 f008      	BRLO _0x23
                 ; 0000 012C           ye++;
000148 d11f      	RCALL SUBOPT_0xA
                 ; 0000 012D           ar=0;
                 ; 0000 012E           }
                 ; 0000 012F           }
                 _0x23:
                 ; 0000 0130            ///////////////////////////////////////////////hora//////////////////////////
                 ; 0000 0131           lcd_gotoxy(0,1);
                 _0x22:
000149 e0e0      	LDI  R30,LOW(0)
00014a d107      	RCALL SUBOPT_0x6
                 ; 0000 0132           lcd_putchar(hor/10+car);
00014b 2dad      	MOV  R26,R13
00014c d12e      	RCALL SUBOPT_0xC
00014d d12f      	RCALL SUBOPT_0xD
                 ; 0000 0133           lcd_gotoxy(1,1);
00014e e0e1      	LDI  R30,LOW(1)
00014f d102      	RCALL SUBOPT_0x6
                 ; 0000 0134           lcd_putchar(hor%10+car);
000150 2dad      	MOV  R26,R13
000151 d12e      	RCALL SUBOPT_0xE
                 ; 0000 0135 
                 ; 0000 0136           lcd_gotoxy(2,1);
000152 e0e2      	LDI  R30,LOW(2)
000153 d0fe      	RCALL SUBOPT_0x6
                 ; 0000 0137           lcd_putchar(':');
000154 e3aa      	LDI  R26,LOW(58)
000155 d07f      	RCALL _lcd_putchar
                 ; 0000 0138 
                 ; 0000 0139           lcd_gotoxy(3,1);
000156 e0e3      	LDI  R30,LOW(3)
000157 d0fa      	RCALL SUBOPT_0x6
                 ; 0000 013A           lcd_putchar(min/10+car);
000158 2daa      	MOV  R26,R10
000159 d121      	RCALL SUBOPT_0xC
00015a d122      	RCALL SUBOPT_0xD
                 ; 0000 013B           lcd_gotoxy(4,1);
00015b e0e4      	LDI  R30,LOW(4)
00015c d0f5      	RCALL SUBOPT_0x6
                 ; 0000 013C           lcd_putchar(min%10+car);
00015d 2daa      	MOV  R26,R10
00015e d121      	RCALL SUBOPT_0xE
                 ; 0000 013D 
                 ; 0000 013E           lcd_gotoxy(5,1);
00015f e0e5      	LDI  R30,LOW(5)
000160 d0f1      	RCALL SUBOPT_0x6
                 ; 0000 013F           lcd_putchar(':');
000161 e3aa      	LDI  R26,LOW(58)
000162 d072      	RCALL _lcd_putchar
                 ; 0000 0140 
                 ; 0000 0141           lcd_gotoxy(6,1);
000163 e0e6      	LDI  R30,LOW(6)
000164 d0ed      	RCALL SUBOPT_0x6
                 ; 0000 0142           lcd_putchar(seg/10+car);
000165 2dab      	MOV  R26,R11
000166 d114      	RCALL SUBOPT_0xC
000167 d115      	RCALL SUBOPT_0xD
                 ; 0000 0143           lcd_gotoxy(7,1);
000168 e0e7      	LDI  R30,LOW(7)
000169 d0e8      	RCALL SUBOPT_0x6
                 ; 0000 0144           lcd_putchar(seg%10+car);
00016a 2dab      	MOV  R26,R11
00016b d114      	RCALL SUBOPT_0xE
                 ; 0000 0145 
                 ; 0000 0146           ////////////////////////////////////////////fecha///////////////////////////////////////////
                 ; 0000 0147 
                 ; 0000 0148           lcd_gotoxy(0,0);
00016c e0e0      	LDI  R30,LOW(0)
00016d d0c4      	RCALL SUBOPT_0x0
                 ; 0000 0149           lcd_putchar(ye/10+car);
00016e d115      	RCALL SUBOPT_0xF
00016f d249      	RCALL __DIVW21U
000170 d10c      	RCALL SUBOPT_0xD
                 ; 0000 014A           lcd_gotoxy(1,0);
000171 e0e1      	LDI  R30,LOW(1)
000172 d0bf      	RCALL SUBOPT_0x0
                 ; 0000 014B           lcd_putchar(ye%10+car);
000173 d110      	RCALL SUBOPT_0xF
000174 d25c      	RCALL __MODW21U
000175 d107      	RCALL SUBOPT_0xD
                 ; 0000 014C           lcd_gotoxy(2,0);
000176 e0e2      	LDI  R30,LOW(2)
000177 d0ba      	RCALL SUBOPT_0x0
                 ; 0000 014D           lcd_putchar(ar/10+car);
000178 d110      	RCALL SUBOPT_0x10
000179 d23f      	RCALL __DIVW21U
00017a d102      	RCALL SUBOPT_0xD
                 ; 0000 014E           lcd_gotoxy(3,0);
00017b e0e3      	LDI  R30,LOW(3)
00017c d0b5      	RCALL SUBOPT_0x0
                 ; 0000 014F           lcd_putchar(ar%10+car);
00017d d10b      	RCALL SUBOPT_0x10
00017e d252      	RCALL __MODW21U
00017f d0fd      	RCALL SUBOPT_0xD
                 ; 0000 0150 
                 ; 0000 0151 
                 ; 0000 0152 
                 ; 0000 0153           lcd_gotoxy(4,0);
000180 e0e4      	LDI  R30,LOW(4)
000181 d0b0      	RCALL SUBOPT_0x0
                 ; 0000 0154           lcd_putchar('-');
000182 e2ad      	LDI  R26,LOW(45)
000183 d051      	RCALL _lcd_putchar
                 ; 0000 0155 
                 ; 0000 0156           lcd_gotoxy(5,0);
000184 e0e5      	LDI  R30,LOW(5)
000185 d0ac      	RCALL SUBOPT_0x0
                 ; 0000 0157           lcd_putchar(mes/10+car);
000186 91a0 00e4 	LDS  R26,_mes
000188 d0f2      	RCALL SUBOPT_0xC
000189 d0f3      	RCALL SUBOPT_0xD
                 ; 0000 0158           lcd_gotoxy(6,0);
00018a e0e6      	LDI  R30,LOW(6)
00018b d0a6      	RCALL SUBOPT_0x0
                 ; 0000 0159           lcd_putchar(mes%10+car);
00018c 91a0 00e4 	LDS  R26,_mes
00018e d0f1      	RCALL SUBOPT_0xE
                 ; 0000 015A 
                 ; 0000 015B           lcd_gotoxy(7,0);
00018f e0e7      	LDI  R30,LOW(7)
000190 d0a1      	RCALL SUBOPT_0x0
                 ; 0000 015C           lcd_putchar('-');
000191 e2ad      	LDI  R26,LOW(45)
000192 d042      	RCALL _lcd_putchar
                 ; 0000 015D 
                 ; 0000 015E           lcd_gotoxy(8,0);
000193 e0e8      	LDI  R30,LOW(8)
000194 d09d      	RCALL SUBOPT_0x0
                 ; 0000 015F           lcd_putchar(dia/10+car);
000195 2dac      	MOV  R26,R12
000196 d0e4      	RCALL SUBOPT_0xC
000197 d0e5      	RCALL SUBOPT_0xD
                 ; 0000 0160           lcd_gotoxy(9,0);
000198 e0e9      	LDI  R30,LOW(9)
000199 d098      	RCALL SUBOPT_0x0
                 ; 0000 0161           lcd_putchar(dia%10+car);
00019a 2dac      	MOV  R26,R12
00019b d0e4      	RCALL SUBOPT_0xE
                 ; 0000 0162       }
00019c cf01      	RJMP _0xA
                 ; 0000 0163 }
                 _0x24:
00019d cfff      	RJMP _0x24
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00019e 93aa      	ST   -Y,R26
00019f b3eb      	IN   R30,0x1B
0001a0 70ef      	ANDI R30,LOW(0xF)
0001a1 2fae      	MOV  R26,R30
0001a2 81e8      	LD   R30,Y
0001a3 7fe0      	ANDI R30,LOW(0xF0)
0001a4 2bea      	OR   R30,R26
0001a5 bbeb      	OUT  0x1B,R30
0001a6 d0e7      	RCALL SUBOPT_0x11
0001a7 9ada      	SBI  0x1B,2
0001a8 d0e5      	RCALL SUBOPT_0x11
0001a9 98da      	CBI  0x1B,2
0001aa d0e3      	RCALL SUBOPT_0x11
0001ab c084      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001ac 93aa      	ST   -Y,R26
0001ad 81a8      	LD   R26,Y
0001ae dfef      	RCALL __lcd_write_nibble_G100
0001af 81e8          ld    r30,y
0001b0 95e2          swap  r30
0001b1 83e8          st    y,r30
0001b2 81a8      	LD   R26,Y
0001b3 dfea      	RCALL __lcd_write_nibble_G100
                +
0001b4 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001b5 958a     +DEC R24
0001b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001b7 c078      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b8 93aa      	ST   -Y,R26
0001b9 81e8      	LD   R30,Y
0001ba e0f0      	LDI  R31,0
0001bb 51e6      	SUBI R30,LOW(-__base_y_G100)
0001bc 4fff      	SBCI R31,HIGH(-__base_y_G100)
0001bd 81e0      	LD   R30,Z
0001be 81a9      	LDD  R26,Y+1
0001bf 0fae      	ADD  R26,R30
0001c0 dfeb      	RCALL __lcd_write_data
0001c1 81e9      	LDD  R30,Y+1
0001c2 93e0 00ee 	STS  __lcd_x,R30
0001c4 81e8      	LD   R30,Y
0001c5 93e0 00ef 	STS  __lcd_y,R30
0001c7 9622      	ADIW R28,2
0001c8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c9 e0a2      	LDI  R26,LOW(2)
0001ca d0c7      	RCALL SUBOPT_0x12
0001cb e0ac      	LDI  R26,LOW(12)
0001cc dfdf      	RCALL __lcd_write_data
0001cd e0a1      	LDI  R26,LOW(1)
0001ce d0c3      	RCALL SUBOPT_0x12
0001cf e0e0      	LDI  R30,LOW(0)
0001d0 93e0 00ef 	STS  __lcd_y,R30
0001d2 93e0 00ee 	STS  __lcd_x,R30
0001d4 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d5 93aa      	ST   -Y,R26
0001d6 81a8      	LD   R26,Y
0001d7 30aa      	CPI  R26,LOW(0xA)
0001d8 f031      	BREQ _0x2000005
0001d9 91e0 00f0 	LDS  R30,__lcd_maxx
0001db 91a0 00ee 	LDS  R26,__lcd_x
0001dd 17ae      	CP   R26,R30
0001de f060      	BRLO _0x2000004
                 _0x2000005:
0001df e0e0      	LDI  R30,LOW(0)
0001e0 93ea      	ST   -Y,R30
0001e1 91a0 00ef 	LDS  R26,__lcd_y
0001e3 5faf      	SUBI R26,-LOW(1)
0001e4 93a0 00ef 	STS  __lcd_y,R26
0001e6 dfd1      	RCALL _lcd_gotoxy
0001e7 81a8      	LD   R26,Y
0001e8 30aa      	CPI  R26,LOW(0xA)
0001e9 f409      	BRNE _0x2000007
0001ea c045      	RJMP _0x2020001
                 _0x2000007:
                 _0x2000004:
0001eb 91e0 00ee 	LDS  R30,__lcd_x
0001ed 5fef      	SUBI R30,-LOW(1)
0001ee 93e0 00ee 	STS  __lcd_x,R30
0001f0 9ad8      	SBI  0x1B,0
0001f1 81a8      	LD   R26,Y
0001f2 dfb9      	RCALL __lcd_write_data
0001f3 98d8      	CBI  0x1B,0
0001f4 c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0001f5 93ba      	ST   -Y,R27
0001f6 93aa      	ST   -Y,R26
0001f7 931a      	ST   -Y,R17
                 _0x200000B:
0001f8 81e9      	LDD  R30,Y+1
0001f9 81fa      	LDD  R31,Y+1+1
0001fa 9631      	ADIW R30,1
0001fb 83e9      	STD  Y+1,R30
0001fc 83fa      	STD  Y+1+1,R31
0001fd 9731      	SBIW R30,1
0001fe 91e4      	LPM  R30,Z
0001ff 2f1e      	MOV  R17,R30
000200 30e0      	CPI  R30,0
000201 f019      	BREQ _0x200000D
000202 2fa1      	MOV  R26,R17
000203 dfd1      	RCALL _lcd_putchar
000204 cff3      	RJMP _0x200000B
                 _0x200000D:
000205 8118      	LDD  R17,Y+0
000206 9623      	ADIW R28,3
000207 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000208 93aa      	ST   -Y,R26
000209 b3ea      	IN   R30,0x1A
00020a 6fe0      	ORI  R30,LOW(0xF0)
00020b bbea      	OUT  0x1A,R30
00020c 9ad2      	SBI  0x1A,2
00020d 9ad0      	SBI  0x1A,0
00020e 9ad1      	SBI  0x1A,1
00020f 98da      	CBI  0x1B,2
000210 98d8      	CBI  0x1B,0
000211 98d9      	CBI  0x1B,1
000212 81e8      	LD   R30,Y
000213 93e0 00f0 	STS  __lcd_maxx,R30
000215 58e0      	SUBI R30,-LOW(128)
                +
000216 93e0 00ec+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000218 81e8      	LD   R30,Y
000219 54e0      	SUBI R30,-LOW(192)
                +
00021a 93e0 00ed+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00021c e1a4      	LDI  R26,LOW(20)
00021d e0b0      	LDI  R27,0
00021e d07d      	RCALL _delay_ms
00021f d076      	RCALL SUBOPT_0x13
000220 d075      	RCALL SUBOPT_0x13
000221 d074      	RCALL SUBOPT_0x13
000222 e2a0      	LDI  R26,LOW(32)
000223 df7a      	RCALL __lcd_write_nibble_G100
                +
000224 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000225 958a     +DEC R24
000226 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000227 e2a8      	LDI  R26,LOW(40)
000228 df83      	RCALL __lcd_write_data
000229 e0a4      	LDI  R26,LOW(4)
00022a df81      	RCALL __lcd_write_data
00022b e8a5      	LDI  R26,LOW(133)
00022c df7f      	RCALL __lcd_write_data
00022d e0a6      	LDI  R26,LOW(6)
00022e df7d      	RCALL __lcd_write_data
00022f df99      	RCALL _lcd_clear
                 _0x2020001:
000230 9621      	ADIW R28,1
000231 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _cel:
0000e0           	.BYTE 0x4
                 _mes:
0000e4           	.BYTE 0x1
                 _change:
0000e5           	.BYTE 0x1
                 _ye:
0000e6           	.BYTE 0x2
                 _ar:
0000e8           	.BYTE 0x2
                 __base_y_G100:
0000ea           	.BYTE 0x4
                 __lcd_x:
0000ee           	.BYTE 0x1
                 __lcd_y:
0000ef           	.BYTE 0x1
                 __lcd_maxx:
0000f0           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x0:
000232 93ea      	ST   -Y,R30
000233 e0a0      	LDI  R26,LOW(0)
000234 cf83      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000235 93e0 00e0 	STS  _cel,R30
000237 93f0 00e1 	STS  _cel+1,R31
000239 9360 00e2 	STS  _cel+2,R22
00023b 9370 00e3 	STS  _cel+3,R23
00023d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00023e 91a0 00e0 	LDS  R26,_cel
000240 91b0 00e1 	LDS  R27,_cel+1
000242 9180 00e2 	LDS  R24,_cel+2
000244 9190 00e3 	LDS  R25,_cel+3
000246 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
000247 e0e0     +LDI R30 , LOW ( 0x42C60000 )
000248 e0f0     +LDI R31 , HIGH ( 0x42C60000 )
000249 ec66     +LDI R22 , BYTE3 ( 0x42C60000 )
00024a e472     +LDI R23 , BYTE4 ( 0x42C60000 )
                 	__GETD1N 0x42C60000
00024b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
00024c e0ea      	LDI  R30,LOW(10)
00024d e0f0      	LDI  R31,HIGH(10)
00024e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00024f dffc      	RCALL SUBOPT_0x4
000250 d17b      	RCALL __DIVW21
000251 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x6:
000252 93ea      	ST   -Y,R30
000253 e0a1      	LDI  R26,LOW(1)
000254 cf63      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
000255 e2ac      	LDI  R26,LOW(300)
000256 e0b1      	LDI  R27,HIGH(300)
000257 c044      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000258 eea8      	LDI  R26,LOW(_ar)
000259 e0b0      	LDI  R27,HIGH(_ar)
00025a 91ed      	LD   R30,X+
00025b 91fd      	LD   R31,X+
00025c 9631      	ADIW R30,1
00025d 93fe      	ST   -X,R31
00025e 93ee      	ST   -X,R30
00025f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000260 91a0 00e8 	LDS  R26,_ar
000262 91b0 00e9 	LDS  R27,_ar+1
000264 36a4      	CPI  R26,LOW(0x64)
000265 e0e0      	LDI  R30,HIGH(0x64)
000266 07be      	CPC  R27,R30
000267 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000268 eea6      	LDI  R26,LOW(_ye)
000269 e0b0      	LDI  R27,HIGH(_ye)
00026a 91ed      	LD   R30,X+
00026b 91fd      	LD   R31,X+
00026c 9631      	ADIW R30,1
00026d 93fe      	ST   -X,R31
00026e 93ee      	ST   -X,R30
00026f e0e0      	LDI  R30,LOW(0)
000270 93e0 00e8 	STS  _ar,R30
000272 93e0 00e9 	STS  _ar+1,R30
000274 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
000275 91e0 00e4 	LDS  R30,_mes
000277 5fef      	SUBI R30,-LOW(1)
000278 93e0 00e4 	STS  _mes,R30
00027a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
00027b e0b0      	LDI  R27,0
00027c cfd2      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0xD:
00027d 5de0      	SUBI R30,-LOW(48)
00027e 2fae      	MOV  R26,R30
00027f cf55      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xE:
000280 27bb      	CLR  R27
000281 dfca      	RCALL SUBOPT_0x4
000282 d151      	RCALL __MODW21
000283 cff9      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000284 91a0 00e6 	LDS  R26,_ye
000286 91b0 00e7 	LDS  R27,_ye+1
000288 cfc3      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000289 91a0 00e8 	LDS  R26,_ar
00028b 91b0 00e9 	LDS  R27,_ar+1
00028d cfbe      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
                +
00028e e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028f 958a     +DEC R24
000290 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000291 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000292 df19      	RCALL __lcd_write_data
000293 e0a3      	LDI  R26,LOW(3)
000294 e0b0      	LDI  R27,0
000295 c006      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
000296 e3a0      	LDI  R26,LOW(48)
000297 df06      	RCALL __lcd_write_nibble_G100
                +
000298 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000299 958a     +DEC R24
00029a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00029b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00029c 9610      	adiw r26,0
00029d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00029e ef8a     +LDI R24 , LOW ( 0xFA )
00029f e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0002a0 9701     +SBIW R24 , 1
0002a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0002a2 95a8      	wdr
0002a3 9711      	sbiw r26,1
0002a4 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002a5 9508      	ret
                 
                 __ROUND_REPACK:
0002a6 2355      	TST  R21
0002a7 f442      	BRPL __REPACK
0002a8 3850      	CPI  R21,0x80
0002a9 f411      	BRNE __ROUND_REPACK0
0002aa ffe0      	SBRS R30,0
0002ab c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002ac 9631      	ADIW R30,1
0002ad 1f69      	ADC  R22,R25
0002ae 1f79      	ADC  R23,R25
0002af f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002b0 e850      	LDI  R21,0x80
0002b1 2757      	EOR  R21,R23
0002b2 f411      	BRNE __REPACK0
0002b3 935f      	PUSH R21
0002b4 c073      	RJMP __ZERORES
                 __REPACK0:
0002b5 3f5f      	CPI  R21,0xFF
0002b6 f031      	BREQ __REPACK1
0002b7 0f66      	LSL  R22
0002b8 0c00      	LSL  R0
0002b9 9557      	ROR  R21
0002ba 9567      	ROR  R22
0002bb 2f75      	MOV  R23,R21
0002bc 9508      	RET
                 __REPACK1:
0002bd 935f      	PUSH R21
0002be 2000      	TST  R0
0002bf f00a      	BRMI __REPACK2
0002c0 c073      	RJMP __MAXRES
                 __REPACK2:
0002c1 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0002c2 e850      	LDI  R21,0x80
0002c3 2e19      	MOV  R1,R25
0002c4 2215      	AND  R1,R21
0002c5 0f88      	LSL  R24
0002c6 1f99      	ROL  R25
0002c7 2795      	EOR  R25,R21
0002c8 0f55      	LSL  R21
0002c9 9587      	ROR  R24
                 
                 __UNPACK1:
0002ca e850      	LDI  R21,0x80
0002cb 2e07      	MOV  R0,R23
0002cc 2205      	AND  R0,R21
0002cd 0f66      	LSL  R22
0002ce 1f77      	ROL  R23
0002cf 2775      	EOR  R23,R21
0002d0 0f55      	LSL  R21
0002d1 9567      	ROR  R22
0002d2 9508      	RET
                 
                 __CFD1U:
0002d3 9468      	SET
0002d4 c001      	RJMP __CFD1U0
                 __CFD1:
0002d5 94e8      	CLT
                 __CFD1U0:
0002d6 935f      	PUSH R21
0002d7 dff2      	RCALL __UNPACK1
0002d8 3870      	CPI  R23,0x80
0002d9 f018      	BRLO __CFD10
0002da 3f7f      	CPI  R23,0xFF
0002db f408      	BRCC __CFD10
0002dc c04b      	RJMP __ZERORES
                 __CFD10:
0002dd e156      	LDI  R21,22
0002de 1b57      	SUB  R21,R23
0002df f4aa      	BRPL __CFD11
0002e0 9551      	NEG  R21
0002e1 3058      	CPI  R21,8
0002e2 f40e      	BRTC __CFD19
0002e3 3059      	CPI  R21,9
                 __CFD19:
0002e4 f030      	BRLO __CFD17
0002e5 efef      	SER  R30
0002e6 efff      	SER  R31
0002e7 ef6f      	SER  R22
0002e8 e77f      	LDI  R23,0x7F
0002e9 f977      	BLD  R23,7
0002ea c01a      	RJMP __CFD15
                 __CFD17:
0002eb 2777      	CLR  R23
0002ec 2355      	TST  R21
0002ed f0b9      	BREQ __CFD15
                 __CFD18:
0002ee 0fee      	LSL  R30
0002ef 1fff      	ROL  R31
0002f0 1f66      	ROL  R22
0002f1 1f77      	ROL  R23
0002f2 955a      	DEC  R21
0002f3 f7d1      	BRNE __CFD18
0002f4 c010      	RJMP __CFD15
                 __CFD11:
0002f5 2777      	CLR  R23
                 __CFD12:
0002f6 3058      	CPI  R21,8
0002f7 f028      	BRLO __CFD13
0002f8 2fef      	MOV  R30,R31
0002f9 2ff6      	MOV  R31,R22
0002fa 2f67      	MOV  R22,R23
0002fb 5058      	SUBI R21,8
0002fc cff9      	RJMP __CFD12
                 __CFD13:
0002fd 2355      	TST  R21
0002fe f031      	BREQ __CFD15
                 __CFD14:
0002ff 9576      	LSR  R23
000300 9567      	ROR  R22
000301 95f7      	ROR  R31
000302 95e7      	ROR  R30
000303 955a      	DEC  R21
000304 f7d1      	BRNE __CFD14
                 __CFD15:
000305 2000      	TST  R0
000306 f40a      	BRPL __CFD16
000307 d0a4      	RCALL __ANEGD1
                 __CFD16:
000308 915f      	POP  R21
000309 9508      	RET
                 
                 __CDF1U:
00030a 9468      	SET
00030b c001      	RJMP __CDF1U0
                 __CDF1:
00030c 94e8      	CLT
                 __CDF1U0:
00030d 9730      	SBIW R30,0
00030e 4060      	SBCI R22,0
00030f 4070      	SBCI R23,0
000310 f0b1      	BREQ __CDF10
000311 2400      	CLR  R0
000312 f026      	BRTS __CDF11
000313 2377      	TST  R23
000314 f412      	BRPL __CDF11
000315 9400      	COM  R0
000316 d095      	RCALL __ANEGD1
                 __CDF11:
000317 2e17      	MOV  R1,R23
000318 e17e      	LDI  R23,30
000319 2011      	TST  R1
                 __CDF12:
00031a f032      	BRMI __CDF13
00031b 957a      	DEC  R23
00031c 0fee      	LSL  R30
00031d 1fff      	ROL  R31
00031e 1f66      	ROL  R22
00031f 1c11      	ROL  R1
000320 cff9      	RJMP __CDF12
                 __CDF13:
000321 2fef      	MOV  R30,R31
000322 2ff6      	MOV  R31,R22
000323 2d61      	MOV  R22,R1
000324 935f      	PUSH R21
000325 df8a      	RCALL __REPACK
000326 915f      	POP  R21
                 __CDF10:
000327 9508      	RET
                 
                 __ZERORES:
000328 27ee      	CLR  R30
000329 27ff      	CLR  R31
00032a 2766      	CLR  R22
00032b 2777      	CLR  R23
00032c 915f      	POP  R21
00032d 9508      	RET
                 
                 __MINRES:
00032e efef      	SER  R30
00032f efff      	SER  R31
000330 e76f      	LDI  R22,0x7F
000331 ef7f      	SER  R23
000332 915f      	POP  R21
000333 9508      	RET
                 
                 __MAXRES:
000334 efef      	SER  R30
000335 efff      	SER  R31
000336 e76f      	LDI  R22,0x7F
000337 e77f      	LDI  R23,0x7F
000338 915f      	POP  R21
000339 9508      	RET
                 
                 __MULF12:
00033a 935f      	PUSH R21
00033b df86      	RCALL __UNPACK
00033c 3870      	CPI  R23,0x80
00033d f351      	BREQ __ZERORES
00033e 3890      	CPI  R25,0x80
00033f f341      	BREQ __ZERORES
000340 2401      	EOR  R0,R1
000341 9408      	SEC
000342 1f79      	ADC  R23,R25
000343 f423      	BRVC __MULF124
000344 f31c      	BRLT __ZERORES
                 __MULF125:
000345 2000      	TST  R0
000346 f33a      	BRMI __MINRES
000347 cfec      	RJMP __MAXRES
                 __MULF124:
000348 920f      	PUSH R0
000349 931f      	PUSH R17
00034a 932f      	PUSH R18
00034b 933f      	PUSH R19
00034c 934f      	PUSH R20
00034d 2711      	CLR  R17
00034e 2722      	CLR  R18
00034f 2799      	CLR  R25
000350 9f68      	MUL  R22,R24
000351 01a0      	MOVW R20,R0
000352 9f8f      	MUL  R24,R31
000353 2d30      	MOV  R19,R0
000354 0d41      	ADD  R20,R1
000355 1f59      	ADC  R21,R25
000356 9f6b      	MUL  R22,R27
000357 0d30      	ADD  R19,R0
000358 1d41      	ADC  R20,R1
000359 1f59      	ADC  R21,R25
00035a 9f8e      	MUL  R24,R30
00035b d027      	RCALL __MULF126
00035c 9fbf      	MUL  R27,R31
00035d d025      	RCALL __MULF126
00035e 9f6a      	MUL  R22,R26
00035f d023      	RCALL __MULF126
000360 9fbe      	MUL  R27,R30
000361 d01d      	RCALL __MULF127
000362 9faf      	MUL  R26,R31
000363 d01b      	RCALL __MULF127
000364 9fae      	MUL  R26,R30
000365 0d11      	ADD  R17,R1
000366 1f29      	ADC  R18,R25
000367 1f39      	ADC  R19,R25
000368 1f49      	ADC  R20,R25
000369 1f59      	ADC  R21,R25
00036a 2fe3      	MOV  R30,R19
00036b 2ff4      	MOV  R31,R20
00036c 2f65      	MOV  R22,R21
00036d 2f52      	MOV  R21,R18
00036e 914f      	POP  R20
00036f 913f      	POP  R19
000370 912f      	POP  R18
000371 911f      	POP  R17
000372 900f      	POP  R0
000373 2366      	TST  R22
000374 f02a      	BRMI __MULF122
000375 0f55      	LSL  R21
000376 1fee      	ROL  R30
000377 1fff      	ROL  R31
000378 1f66      	ROL  R22
000379 c002      	RJMP __MULF123
                 __MULF122:
00037a 9573      	INC  R23
00037b f24b      	BRVS __MULF125
                 __MULF123:
00037c df29      	RCALL __ROUND_REPACK
00037d 915f      	POP  R21
00037e 9508      	RET
                 
                 __MULF127:
00037f 0d10      	ADD  R17,R0
000380 1d21      	ADC  R18,R1
000381 1f39      	ADC  R19,R25
000382 c002      	RJMP __MULF128
                 __MULF126:
000383 0d20      	ADD  R18,R0
000384 1d31      	ADC  R19,R1
                 __MULF128:
000385 1f49      	ADC  R20,R25
000386 1f59      	ADC  R21,R25
000387 9508      	RET
                 
                 __CMPF12:
000388 2399      	TST  R25
000389 f09a      	BRMI __CMPF120
00038a 2377      	TST  R23
00038b f042      	BRMI __CMPF121
00038c 1797      	CP   R25,R23
00038d f048      	BRLO __CMPF122
00038e f429      	BRNE __CMPF121
00038f 17ae      	CP   R26,R30
000390 07bf      	CPC  R27,R31
000391 0786      	CPC  R24,R22
000392 f020      	BRLO __CMPF122
000393 f031      	BREQ __CMPF123
                 __CMPF121:
000394 9498      	CLZ
000395 9488      	CLC
000396 9508      	RET
                 __CMPF122:
000397 9498      	CLZ
000398 9408      	SEC
000399 9508      	RET
                 __CMPF123:
00039a 9418      	SEZ
00039b 9488      	CLC
00039c 9508      	RET
                 __CMPF120:
00039d 2377      	TST  R23
00039e f7c2      	BRPL __CMPF122
00039f 1797      	CP   R25,R23
0003a0 f398      	BRLO __CMPF121
0003a1 f7a9      	BRNE __CMPF122
0003a2 17ea      	CP   R30,R26
0003a3 07fb      	CPC  R31,R27
0003a4 0768      	CPC  R22,R24
0003a5 f388      	BRLO __CMPF122
0003a6 f399      	BREQ __CMPF123
0003a7 cfec      	RJMP __CMPF121
                 
                 __ANEGW1:
0003a8 95f1      	NEG  R31
0003a9 95e1      	NEG  R30
0003aa 40f0      	SBCI R31,0
0003ab 9508      	RET
                 
                 __ANEGD1:
0003ac 95f0      	COM  R31
0003ad 9560      	COM  R22
0003ae 9570      	COM  R23
0003af 95e1      	NEG  R30
0003b0 4fff      	SBCI R31,-1
0003b1 4f6f      	SBCI R22,-1
0003b2 4f7f      	SBCI R23,-1
0003b3 9508      	RET
                 
                 __CWD1:
0003b4 2f6f      	MOV  R22,R31
0003b5 0f66      	ADD  R22,R22
0003b6 0b66      	SBC  R22,R22
0003b7 2f76      	MOV  R23,R22
0003b8 9508      	RET
                 
                 __DIVW21U:
0003b9 2400      	CLR  R0
0003ba 2411      	CLR  R1
0003bb e190      	LDI  R25,16
                 __DIVW21U1:
0003bc 0faa      	LSL  R26
0003bd 1fbb      	ROL  R27
0003be 1c00      	ROL  R0
0003bf 1c11      	ROL  R1
0003c0 1a0e      	SUB  R0,R30
0003c1 0a1f      	SBC  R1,R31
0003c2 f418      	BRCC __DIVW21U2
0003c3 0e0e      	ADD  R0,R30
0003c4 1e1f      	ADC  R1,R31
0003c5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003c6 60a1      	SBR  R26,1
                 __DIVW21U3:
0003c7 959a      	DEC  R25
0003c8 f799      	BRNE __DIVW21U1
0003c9 01fd      	MOVW R30,R26
0003ca 01d0      	MOVW R26,R0
0003cb 9508      	RET
                 
                 __DIVW21:
0003cc d015      	RCALL __CHKSIGNW
0003cd dfeb      	RCALL __DIVW21U
0003ce f40e      	BRTC __DIVW211
0003cf dfd8      	RCALL __ANEGW1
                 __DIVW211:
0003d0 9508      	RET
                 
                 __MODW21U:
0003d1 dfe7      	RCALL __DIVW21U
0003d2 01fd      	MOVW R30,R26
0003d3 9508      	RET
                 
                 __MODW21:
0003d4 94e8      	CLT
0003d5 ffb7      	SBRS R27,7
0003d6 c004      	RJMP __MODW211
0003d7 95a0      	COM  R26
0003d8 95b0      	COM  R27
0003d9 9611      	ADIW R26,1
0003da 9468      	SET
                 __MODW211:
0003db fdf7      	SBRC R31,7
0003dc dfcb      	RCALL __ANEGW1
0003dd dfdb      	RCALL __DIVW21U
0003de 01fd      	MOVW R30,R26
0003df f40e      	BRTC __MODW212
0003e0 dfc7      	RCALL __ANEGW1
                 __MODW212:
0003e1 9508      	RET
                 
                 __CHKSIGNW:
0003e2 94e8      	CLT
0003e3 fff7      	SBRS R31,7
0003e4 c002      	RJMP __CHKSW1
0003e5 dfc2      	RCALL __ANEGW1
0003e6 9468      	SET
                 __CHKSW1:
0003e7 ffb7      	SBRS R27,7
0003e8 c006      	RJMP __CHKSW2
0003e9 95a0      	COM  R26
0003ea 95b0      	COM  R27
0003eb 9611      	ADIW R26,1
0003ec f800      	BLD  R0,0
0003ed 9403      	INC  R0
0003ee fa00      	BST  R0,0
                 __CHKSW2:
0003ef 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :  28 r1 :  17 r2 :   5 r3 :   0 r4 :   6 r5 :   0 r6 :   2 r7 :   2 
r8 :   2 r9 :   2 r10:   7 r11:   8 r12:   6 r13:   6 r14:   0 r15:   0 
r16:   0 r17:   9 r18:   7 r19:   8 r20:   8 r21:  44 r22:  38 r23:  37 
r24:  28 r25:  27 r26: 104 r27:  27 r28:   4 r29:   1 r30: 206 r31:  47 
x  :  11 y  :  32 z  :   9 
Registers used: 30 out of 35 (85.7%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :  10 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   4 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   6 brne  :  20 brpl  :   5 brsh  :   4 brtc  :   3 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 cbi   :   5 
cbr   :   0 clc   :   2 clh   :   0 cli   :   1 cln   :   0 clr   :  22 
cls   :   0 clt   :   5 clv   :   0 clz   :   2 com   :   8 cp    :   9 
cpc   :   5 cpi   :  17 cpse  :   0 dec   :  10 des   :   0 eor   :   4 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 
inc   :  10 ld    :  17 ldd   :   5 ldi   : 131 lds   :  20 lpm   :   9 
lsl   :  10 lsr   :   1 mov   :  37 movw  :  14 mul   :   9 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   1 ori   :   2 out   :  46 
pop   :  11 push  :  10 rcall : 144 ret   :  36 reti  :   0 rjmp  :  73 
rol   :  14 ror   :   7 sbc   :   2 sbci  :   7 sbi   :   7 sbic  :   7 
sbis  :   1 sbiw  :   7 sbr   :   1 sbrc  :   2 sbrs  :   5 sec   :   2 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   5 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  20 std   :   2 
sts   :  18 sub   :   2 subi  :  11 swap  :   1 tst   :  12 wdr   :   1 

Instructions used: 75 out of 114 (65.8%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007e0   1956     60   2016    8192  24.6%
[.dseg] 0x000060 0x0000f1      0     17     17     512   3.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
