
AVRASM ver. 2.1.30  C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm Thu Nov 07 09:06:07 2019

C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm(1070): warning: Register r4 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm(1071): warning: Register r6 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm(1072): warning: Register r8 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm(1073): warning: Register r10 already defined by the .DEF directive
C:\Users\alexz\Desktop\Archivos\ESCOM\7° semestre\Controladores\Prácticas\Practice16\List\Practice16.asm(1074): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.60 Evaluation
                 ;(C) Copyright 1998-2012 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8535L
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535L
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cn=R4
                 	.DEF _centenas=R6
                 	.DEF _decenas=R8
                 	.DEF _unidades=R10
                 	.DEF _centigrados=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c025      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000015 0000
000016 0000      	.DB  0x0,0x0,0x0,0x0
000017 0000
000018 0000      	.DB  0x0,0x0,0x0,0x0
000019 0000      	.DB  0x0,0x0
                 
                 _0x3:
00001a 063f
00001b 4f5b
00001c 6d66
00001d 077c      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7C,0x7
00001e 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
00001f 000a      	.DW  0x0A
000020 0004      	.DW  0x04
000021 002a      	.DW  __REG_VARS*2
                 
000022 000a      	.DW  0x0A
000023 00e0      	.DW  _tabla7segmentos
000024 0034      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000025 0000      	.DW  0
                 
                 __RESET:
000026 94f8      	CLI
000027 27ee      	CLR  R30
000028 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000029 e0f1      	LDI  R31,1
00002a bffb      	OUT  GICR,R31
00002b bfeb      	OUT  GICR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002d e1f8      	LDI  R31,0x18
00002e bdf1      	OUT  WDTCR,R31
00002f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
000032 27bb      	CLR  R27
                 __CLEAR_REG:
000033 93ed      	ST   X+,R30
000034 958a      	DEC  R24
000035 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000036 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000037 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000038 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000039 93ed      	ST   X+,R30
00003a 9701      	SBIW R24,1
00003b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003c e3ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003e 9185      	LPM  R24,Z+
00003f 9195      	LPM  R25,Z+
000040 9700      	SBIW R24,0
000041 f061      	BREQ __GLOBAL_INI_END
000042 91a5      	LPM  R26,Z+
000043 91b5      	LPM  R27,Z+
000044 9005      	LPM  R0,Z+
000045 9015      	LPM  R1,Z+
000046 01bf      	MOVW R22,R30
000047 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000048 9005      	LPM  R0,Z+
000049 920d      	ST   X+,R0
00004a 9701      	SBIW R24,1
00004b f7e1      	BRNE __GLOBAL_INI_LOOP
00004c 01fb      	MOVW R30,R22
00004d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004f bfed      	OUT  SPL,R30
000050 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000051 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000052 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000053 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000054 c00e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 ;/*****************************************************
                 ;This program was produced by the
                 ;CodeWizardAVR V2.05.0 Professional
                 ;Automatic Program Generator
                 ;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 29/05/2019
                 ;Author  : NeVaDa
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*****************************************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#define C0 PORTC.0
                 ;#define C1 PORTC.1
                 ;#define C2 PORTC.2
                 ;#define boton PIND.0
                 ;const char tabla7segmentos [10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7c,0x07,0x7f,0x6f};
                 
                 	.DSEG
                 ;int cn = 0, centenas = 0, decenas=0, unidades=0, centigrados = 0, farenhei = 0;
                 ;
                 ;
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0029 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 002A ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000055 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000056 81e8      	LD   R30,Y
000057 66e0      	ORI  R30,LOW(0x60)
000058 b9e7      	OUT  0x7,R30
                 ; 0000 002B // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 002C delay_us(10);
                +
000059 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00005a 958a     +DEC R24
00005b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 002D // Start the AD conversion
                 ; 0000 002E ADCSRA|=0x40;
00005c 9a36      	SBI  0x6,6
                 ; 0000 002F // Wait for the AD conversion to complete
                 ; 0000 0030 while ((ADCSRA & 0x10)==0);
                 _0x4:
00005d 9b34      	SBIS 0x6,4
00005e cffe      	RJMP _0x4
                 ; 0000 0031 ADCSRA|=0x10;
00005f 9a34      	SBI  0x6,4
                 ; 0000 0032 return ADCH;
000060 b1e5      	IN   R30,0x5
000061 9621      	ADIW R28,1
000062 9508      	RET
                 ; 0000 0033 }
                 ; .FEND
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0038 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0039 // Declare your local variables here
                 ; 0000 003A 
                 ; 0000 003B // Input/Output Ports initialization
                 ; 0000 003C // Port A initialization
                 ; 0000 003D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 003E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 003F PORTA=0x00;
000063 e0e0      	LDI  R30,LOW(0)
000064 bbeb      	OUT  0x1B,R30
                 ; 0000 0040 DDRA=0x00;
000065 bbea      	OUT  0x1A,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port B initialization
                 ; 0000 0043 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0044 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0045 PORTB=0x00;
000066 bbe8      	OUT  0x18,R30
                 ; 0000 0046 DDRB=0xFF;
000067 efef      	LDI  R30,LOW(255)
000068 bbe7      	OUT  0x17,R30
                 ; 0000 0047 
                 ; 0000 0048 // Port C initialization
                 ; 0000 0049 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 004A // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 004B PORTC=0x00;
000069 e0e0      	LDI  R30,LOW(0)
00006a bbe5      	OUT  0x15,R30
                 ; 0000 004C DDRC=0xFF;
00006b efef      	LDI  R30,LOW(255)
00006c bbe4      	OUT  0x14,R30
                 ; 0000 004D 
                 ; 0000 004E // Port D initialization
                 ; 0000 004F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0050 // State7=P State6=P State5=P State4=P State3=P State2=P State1=P State0=P
                 ; 0000 0051 PORTD=0xFF;
00006d bbe2      	OUT  0x12,R30
                 ; 0000 0052 DDRD=0x00;
00006e e0e0      	LDI  R30,LOW(0)
00006f bbe1      	OUT  0x11,R30
                 ; 0000 0053 
                 ; 0000 0054 // Timer/Counter 0 initialization
                 ; 0000 0055 // Clock source: System Clock
                 ; 0000 0056 // Clock value: Timer 0 Stopped
                 ; 0000 0057 // Mode: Normal top=0xFF
                 ; 0000 0058 // OC0 output: Disconnected
                 ; 0000 0059 TCCR0=0x00;
000070 bfe3      	OUT  0x33,R30
                 ; 0000 005A TCNT0=0x00;
000071 bfe2      	OUT  0x32,R30
                 ; 0000 005B OCR0=0x00;
000072 bfec      	OUT  0x3C,R30
                 ; 0000 005C 
                 ; 0000 005D // Timer/Counter 1 initialization
                 ; 0000 005E // Clock source: System Clock
                 ; 0000 005F // Clock value: Timer1 Stopped
                 ; 0000 0060 // Mode: Normal top=0xFFFF
                 ; 0000 0061 // OC1A output: Discon.
                 ; 0000 0062 // OC1B output: Discon.
                 ; 0000 0063 // Noise Canceler: Off
                 ; 0000 0064 // Input Capture on Falling Edge
                 ; 0000 0065 // Timer1 Overflow Interrupt: Off
                 ; 0000 0066 // Input Capture Interrupt: Off
                 ; 0000 0067 // Compare A Match Interrupt: Off
                 ; 0000 0068 // Compare B Match Interrupt: Off
                 ; 0000 0069 TCCR1A=0x00;
000073 bdef      	OUT  0x2F,R30
                 ; 0000 006A TCCR1B=0x00;
000074 bdee      	OUT  0x2E,R30
                 ; 0000 006B TCNT1H=0x00;
000075 bded      	OUT  0x2D,R30
                 ; 0000 006C TCNT1L=0x00;
000076 bdec      	OUT  0x2C,R30
                 ; 0000 006D ICR1H=0x00;
000077 bde7      	OUT  0x27,R30
                 ; 0000 006E ICR1L=0x00;
000078 bde6      	OUT  0x26,R30
                 ; 0000 006F OCR1AH=0x00;
000079 bdeb      	OUT  0x2B,R30
                 ; 0000 0070 OCR1AL=0x00;
00007a bdea      	OUT  0x2A,R30
                 ; 0000 0071 OCR1BH=0x00;
00007b bde9      	OUT  0x29,R30
                 ; 0000 0072 OCR1BL=0x00;
00007c bde8      	OUT  0x28,R30
                 ; 0000 0073 
                 ; 0000 0074 // Timer/Counter 2 initialization
                 ; 0000 0075 // Clock source: System Clock
                 ; 0000 0076 // Clock value: Timer2 Stopped
                 ; 0000 0077 // Mode: Normal top=0xFF
                 ; 0000 0078 // OC2 output: Disconnected
                 ; 0000 0079 ASSR=0x00;
00007d bde2      	OUT  0x22,R30
                 ; 0000 007A TCCR2=0x00;
00007e bde5      	OUT  0x25,R30
                 ; 0000 007B TCNT2=0x00;
00007f bde4      	OUT  0x24,R30
                 ; 0000 007C OCR2=0x00;
000080 bde3      	OUT  0x23,R30
                 ; 0000 007D 
                 ; 0000 007E // External Interrupt(s) initialization
                 ; 0000 007F // INT0: Off
                 ; 0000 0080 // INT1: Off
                 ; 0000 0081 // INT2: Off
                 ; 0000 0082 MCUCR=0x00;
000081 bfe5      	OUT  0x35,R30
                 ; 0000 0083 MCUCSR=0x00;
000082 bfe4      	OUT  0x34,R30
                 ; 0000 0084 
                 ; 0000 0085 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0086 TIMSK=0x00;
000083 bfe9      	OUT  0x39,R30
                 ; 0000 0087 
                 ; 0000 0088 // USART initialization
                 ; 0000 0089 // USART disabled
                 ; 0000 008A UCSRB=0x00;
000084 b9ea      	OUT  0xA,R30
                 ; 0000 008B 
                 ; 0000 008C // Analog Comparator initialization
                 ; 0000 008D // Analog Comparator: Off
                 ; 0000 008E // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 008F ACSR=0x80;
000085 e8e0      	LDI  R30,LOW(128)
000086 b9e8      	OUT  0x8,R30
                 ; 0000 0090 SFIOR=0x00;
000087 e0e0      	LDI  R30,LOW(0)
000088 bfe0      	OUT  0x30,R30
                 ; 0000 0091 
                 ; 0000 0092 // ADC initialization
                 ; 0000 0093 // ADC Clock frequency: 500,000 kHz
                 ; 0000 0094 // ADC Voltage Reference: AVCC pin
                 ; 0000 0095 // Only the 8 most significant bits of
                 ; 0000 0096 // the AD conversion result are used
                 ; 0000 0097 ADMUX=ADC_VREF_TYPE & 0xff;
000089 e6e0      	LDI  R30,LOW(96)
00008a b9e7      	OUT  0x7,R30
                 ; 0000 0098 ADCSRA=0x84;
00008b e8e4      	LDI  R30,LOW(132)
00008c b9e6      	OUT  0x6,R30
                 ; 0000 0099 
                 ; 0000 009A // SPI initialization
                 ; 0000 009B // SPI disabled
                 ; 0000 009C SPCR=0x00;
00008d e0e0      	LDI  R30,LOW(0)
00008e b9ed      	OUT  0xD,R30
                 ; 0000 009D 
                 ; 0000 009E // TWI initialization
                 ; 0000 009F // TWI disabled
                 ; 0000 00A0 TWCR=0x00;
00008f bfe6      	OUT  0x36,R30
                 ; 0000 00A1 
                 ; 0000 00A2 while (1)
                 _0x7:
                 ; 0000 00A3       {
                 ; 0000 00A4       // Place your code here
                 ; 0000 00A5       cn = (read_adc(0)*500)/255;
000090 e0a0      	LDI  R26,LOW(0)
000091 dfc3      	RCALL _read_adc
000092 e0f0      	LDI  R31,0
000093 efa4      	LDI  R26,LOW(500)
000094 e0b1      	LDI  R27,HIGH(500)
000095 d1bd      	RCALL __MULW12
000096 01df      	MOVW R26,R30
000097 efef      	LDI  R30,LOW(255)
000098 e0f0      	LDI  R31,HIGH(255)
000099 d1d1      	RCALL __DIVW21
00009a 012f      	MOVW R4,R30
                 ; 0000 00A6           if (boton==0){
00009b 9980      	SBIC 0x10,0
00009c c02c      	RJMP _0xA
                 ; 0000 00A7                 farenhei = (cn*1.8)+32;
00009d 01f2      	MOVW R30,R4
00009e d1a7      	RCALL __CWD1
00009f d0c9      	RCALL __CDF1
                +
0000a0 e6a6     +LDI R26 , LOW ( 0x3FE66666 )
0000a1 e6b6     +LDI R27 , HIGH ( 0x3FE66666 )
0000a2 ee86     +LDI R24 , BYTE3 ( 0x3FE66666 )
0000a3 e39f     +LDI R25 , BYTE4 ( 0x3FE66666 )
                 	__GETD2N 0x3FE66666
0000a4 d147      	RCALL __MULF12
                +
0000a5 e0a0     +LDI R26 , LOW ( 0x42000000 )
0000a6 e0b0     +LDI R27 , HIGH ( 0x42000000 )
0000a7 e080     +LDI R24 , BYTE3 ( 0x42000000 )
0000a8 e492     +LDI R25 , BYTE4 ( 0x42000000 )
                 	__GETD2N 0x42000000
0000a9 d0f2      	RCALL __ADDF12
0000aa eeaa      	LDI  R26,LOW(_farenhei)
0000ab e0b0      	LDI  R27,HIGH(_farenhei)
0000ac d085      	RCALL __CFD1
0000ad 93ed      	ST   X+,R30
0000ae 93fc      	ST   X,R31
                 ; 0000 00A8                      centenas = farenhei / 100;
0000af d025      	RCALL SUBOPT_0x0
0000b0 d1ba      	RCALL __DIVW21
0000b1 013f      	MOVW R6,R30
                 ; 0000 00A9                      decenas = (farenhei % 100)/10;
0000b2 d022      	RCALL SUBOPT_0x0
0000b3 d1bc      	RCALL __MODW21
0000b4 01df      	MOVW R26,R30
0000b5 d026      	RCALL SUBOPT_0x1
0000b6 d1b4      	RCALL __DIVW21
0000b7 014f      	MOVW R8,R30
                 ; 0000 00AA                      unidades = farenhei % 10;
0000b8 91a0 00ea 	LDS  R26,_farenhei
0000ba 91b0 00eb 	LDS  R27,_farenhei+1
0000bc d022      	RCALL SUBOPT_0x2
                 ; 0000 00AB                       C0 = 0;
                 ; 0000 00AC                       C1 = 0;
0000bd 98a9      	CBI  0x15,1
                 ; 0000 00AD                       C2 = 1;
0000be 9aaa      	SBI  0x15,2
                 ; 0000 00AE                       PORTB = tabla7segmentos[centenas];
0000bf d024      	RCALL SUBOPT_0x3
0000c0 0da6      	ADD  R26,R6
0000c1 1db7      	ADC  R27,R7
0000c2 d024      	RCALL SUBOPT_0x4
                 ; 0000 00AF                       delay_ms(5);
                 ; 0000 00B0                       C0 = 0;
0000c3 98a8      	CBI  0x15,0
                 ; 0000 00B1                       C1 = 1;
0000c4 d027      	RCALL SUBOPT_0x5
                 ; 0000 00B2                       C2 = 0;
                 ; 0000 00B3                       PORTB = tabla7segmentos[decenas];
                 ; 0000 00B4                       delay_ms(5);
                 ; 0000 00B5                       C0 = 1;
0000c5 d02c      	RCALL SUBOPT_0x6
                 ; 0000 00B6                       C1 = 0;
                 ; 0000 00B7                       C2 = 0;
                 ; 0000 00B8                       PORTB = tabla7segmentos[unidades];
0000c6 91ec      	LD   R30,X
0000c7 bbe8      	OUT  0x18,R30
                 ; 0000 00B9           }
                 ; 0000 00BA           else{
0000c8 c00a      	RJMP _0x1D
                 _0xA:
                 ; 0000 00BB                 centigrados = cn;
0000c9 0162      	MOVW R12,R4
                 ; 0000 00BC                      decenas = centigrados/10;
0000ca 01d6      	MOVW R26,R12
0000cb d010      	RCALL SUBOPT_0x1
0000cc d19e      	RCALL __DIVW21
0000cd 014f      	MOVW R8,R30
                 ; 0000 00BD                      unidades = centigrados%10;
0000ce 01d6      	MOVW R26,R12
0000cf d00f      	RCALL SUBOPT_0x2
                 ; 0000 00BE                           C0 = 0;
                 ; 0000 00BF                           C1 = 1;
0000d0 d01b      	RCALL SUBOPT_0x5
                 ; 0000 00C0                           C2 = 0;
                 ; 0000 00C1                           PORTB = tabla7segmentos[decenas];
                 ; 0000 00C2                           delay_ms(5);
                 ; 0000 00C3                           C0 = 1;
0000d1 d020      	RCALL SUBOPT_0x6
                 ; 0000 00C4                           C1 = 0;
                 ; 0000 00C5                           C2 = 0;
                 ; 0000 00C6                           PORTB = tabla7segmentos[unidades];
0000d2 d014      	RCALL SUBOPT_0x4
                 ; 0000 00C7                           delay_ms(5);
                 ; 0000 00C8           }
                 _0x1D:
                 ; 0000 00C9       }
0000d3 cfbc      	RJMP _0x7
                 ; 0000 00CA }
                 _0x2A:
0000d4 cfff      	RJMP _0x2A
                 ; .FEND
                 
                 	.DSEG
                 _tabla7segmentos:
0000e0           	.BYTE 0xA
                 _farenhei:
0000ea           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0000d5 91a0 00ea 	LDS  R26,_farenhei
0000d7 91b0 00eb 	LDS  R27,_farenhei+1
0000d9 e6e4      	LDI  R30,LOW(100)
0000da e0f0      	LDI  R31,HIGH(100)
0000db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0000dc e0ea      	LDI  R30,LOW(10)
0000dd e0f0      	LDI  R31,HIGH(10)
0000de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0000df dffc      	RCALL SUBOPT_0x1
0000e0 d18f      	RCALL __MODW21
0000e1 015f      	MOVW R10,R30
0000e2 98a8      	CBI  0x15,0
0000e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0000e4 eea0      	LDI  R26,LOW(_tabla7segmentos)
0000e5 e0b0      	LDI  R27,HIGH(_tabla7segmentos)
0000e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
0000e7 91ec      	LD   R30,X
0000e8 bbe8      	OUT  0x18,R30
0000e9 e0a5      	LDI  R26,LOW(5)
0000ea e0b0      	LDI  R27,0
0000eb c00d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0000ec 9aa9      	SBI  0x15,1
0000ed 98aa      	CBI  0x15,2
0000ee dff5      	RCALL SUBOPT_0x3
0000ef 0da8      	ADD  R26,R8
0000f0 1db9      	ADC  R27,R9
0000f1 cff5      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0000f2 9aa8      	SBI  0x15,0
0000f3 98a9      	CBI  0x15,1
0000f4 98aa      	CBI  0x15,2
0000f5 dfee      	RCALL SUBOPT_0x3
0000f6 0daa      	ADD  R26,R10
0000f7 1dbb      	ADC  R27,R11
0000f8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0000f9 9610      	adiw r26,0
0000fa f039      	breq __delay_ms1
                 __delay_ms0:
                +
0000fb ef8a     +LDI R24 , LOW ( 0xFA )
0000fc e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0000fd 9701     +SBIW R24 , 1
0000fe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0000ff 95a8      	wdr
000100 9711      	sbiw r26,1
000101 f7c9      	brne __delay_ms0
                 __delay_ms1:
000102 9508      	ret
                 
                 __ROUND_REPACK:
000103 2355      	TST  R21
000104 f442      	BRPL __REPACK
000105 3850      	CPI  R21,0x80
000106 f411      	BRNE __ROUND_REPACK0
000107 ffe0      	SBRS R30,0
000108 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000109 9631      	ADIW R30,1
00010a 1f69      	ADC  R22,R25
00010b 1f79      	ADC  R23,R25
00010c f06b      	BRVS __REPACK1
                 
                 __REPACK:
00010d e850      	LDI  R21,0x80
00010e 2757      	EOR  R21,R23
00010f f411      	BRNE __REPACK0
000110 935f      	PUSH R21
000111 c0c8      	RJMP __ZERORES
                 __REPACK0:
000112 3f5f      	CPI  R21,0xFF
000113 f031      	BREQ __REPACK1
000114 0f66      	LSL  R22
000115 0c00      	LSL  R0
000116 9557      	ROR  R21
000117 9567      	ROR  R22
000118 2f75      	MOV  R23,R21
000119 9508      	RET
                 __REPACK1:
00011a 935f      	PUSH R21
00011b 2000      	TST  R0
00011c f00a      	BRMI __REPACK2
00011d c0c8      	RJMP __MAXRES
                 __REPACK2:
00011e c0c1      	RJMP __MINRES
                 
                 __UNPACK:
00011f e850      	LDI  R21,0x80
000120 2e19      	MOV  R1,R25
000121 2215      	AND  R1,R21
000122 0f88      	LSL  R24
000123 1f99      	ROL  R25
000124 2795      	EOR  R25,R21
000125 0f55      	LSL  R21
000126 9587      	ROR  R24
                 
                 __UNPACK1:
000127 e850      	LDI  R21,0x80
000128 2e07      	MOV  R0,R23
000129 2205      	AND  R0,R21
00012a 0f66      	LSL  R22
00012b 1f77      	ROL  R23
00012c 2775      	EOR  R23,R21
00012d 0f55      	LSL  R21
00012e 9567      	ROR  R22
00012f 9508      	RET
                 
                 __CFD1U:
000130 9468      	SET
000131 c001      	RJMP __CFD1U0
                 __CFD1:
000132 94e8      	CLT
                 __CFD1U0:
000133 935f      	PUSH R21
000134 dff2      	RCALL __UNPACK1
000135 3870      	CPI  R23,0x80
000136 f018      	BRLO __CFD10
000137 3f7f      	CPI  R23,0xFF
000138 f408      	BRCC __CFD10
000139 c0a0      	RJMP __ZERORES
                 __CFD10:
00013a e156      	LDI  R21,22
00013b 1b57      	SUB  R21,R23
00013c f4aa      	BRPL __CFD11
00013d 9551      	NEG  R21
00013e 3058      	CPI  R21,8
00013f f40e      	BRTC __CFD19
000140 3059      	CPI  R21,9
                 __CFD19:
000141 f030      	BRLO __CFD17
000142 efef      	SER  R30
000143 efff      	SER  R31
000144 ef6f      	SER  R22
000145 e77f      	LDI  R23,0x7F
000146 f977      	BLD  R23,7
000147 c01a      	RJMP __CFD15
                 __CFD17:
000148 2777      	CLR  R23
000149 2355      	TST  R21
00014a f0b9      	BREQ __CFD15
                 __CFD18:
00014b 0fee      	LSL  R30
00014c 1fff      	ROL  R31
00014d 1f66      	ROL  R22
00014e 1f77      	ROL  R23
00014f 955a      	DEC  R21
000150 f7d1      	BRNE __CFD18
000151 c010      	RJMP __CFD15
                 __CFD11:
000152 2777      	CLR  R23
                 __CFD12:
000153 3058      	CPI  R21,8
000154 f028      	BRLO __CFD13
000155 2fef      	MOV  R30,R31
000156 2ff6      	MOV  R31,R22
000157 2f67      	MOV  R22,R23
000158 5058      	SUBI R21,8
000159 cff9      	RJMP __CFD12
                 __CFD13:
00015a 2355      	TST  R21
00015b f031      	BREQ __CFD15
                 __CFD14:
00015c 9576      	LSR  R23
00015d 9567      	ROR  R22
00015e 95f7      	ROR  R31
00015f 95e7      	ROR  R30
000160 955a      	DEC  R21
000161 f7d1      	BRNE __CFD14
                 __CFD15:
000162 2000      	TST  R0
000163 f40a      	BRPL __CFD16
000164 d0d9      	RCALL __ANEGD1
                 __CFD16:
000165 915f      	POP  R21
000166 9508      	RET
                 
                 __CDF1U:
000167 9468      	SET
000168 c001      	RJMP __CDF1U0
                 __CDF1:
000169 94e8      	CLT
                 __CDF1U0:
00016a 9730      	SBIW R30,0
00016b 4060      	SBCI R22,0
00016c 4070      	SBCI R23,0
00016d f0b1      	BREQ __CDF10
00016e 2400      	CLR  R0
00016f f026      	BRTS __CDF11
000170 2377      	TST  R23
000171 f412      	BRPL __CDF11
000172 9400      	COM  R0
000173 d0ca      	RCALL __ANEGD1
                 __CDF11:
000174 2e17      	MOV  R1,R23
000175 e17e      	LDI  R23,30
000176 2011      	TST  R1
                 __CDF12:
000177 f032      	BRMI __CDF13
000178 957a      	DEC  R23
000179 0fee      	LSL  R30
00017a 1fff      	ROL  R31
00017b 1f66      	ROL  R22
00017c 1c11      	ROL  R1
00017d cff9      	RJMP __CDF12
                 __CDF13:
00017e 2fef      	MOV  R30,R31
00017f 2ff6      	MOV  R31,R22
000180 2d61      	MOV  R22,R1
000181 935f      	PUSH R21
000182 df8a      	RCALL __REPACK
000183 915f      	POP  R21
                 __CDF10:
000184 9508      	RET
                 
                 __SWAPACC:
000185 934f      	PUSH R20
000186 01af      	MOVW R20,R30
000187 01fd      	MOVW R30,R26
000188 01da      	MOVW R26,R20
000189 01ab      	MOVW R20,R22
00018a 01bc      	MOVW R22,R24
00018b 01ca      	MOVW R24,R20
00018c 2d40      	MOV  R20,R0
00018d 2c01      	MOV  R0,R1
00018e 2e14      	MOV  R1,R20
00018f 914f      	POP  R20
000190 9508      	RET
                 
                 __UADD12:
000191 0fea      	ADD  R30,R26
000192 1ffb      	ADC  R31,R27
000193 1f68      	ADC  R22,R24
000194 9508      	RET
                 
                 __NEGMAN1:
000195 95e0      	COM  R30
000196 95f0      	COM  R31
000197 9560      	COM  R22
000198 5fef      	SUBI R30,-1
000199 4fff      	SBCI R31,-1
00019a 4f6f      	SBCI R22,-1
00019b 9508      	RET
                 
                 __ADDF12:
00019c 935f      	PUSH R21
00019d df81      	RCALL __UNPACK
00019e 3890      	CPI  R25,0x80
00019f f139      	BREQ __ADDF129
                 
                 __ADDF120:
0001a0 3870      	CPI  R23,0x80
0001a1 f121      	BREQ __ADDF128
                 __ADDF121:
0001a2 2f57      	MOV  R21,R23
0001a3 1b59      	SUB  R21,R25
0001a4 f12b      	BRVS __ADDF1211
0001a5 f412      	BRPL __ADDF122
0001a6 dfde      	RCALL __SWAPACC
0001a7 cffa      	RJMP __ADDF121
                 __ADDF122:
0001a8 3158      	CPI  R21,24
0001a9 f018      	BRLO __ADDF123
0001aa 27aa      	CLR  R26
0001ab 27bb      	CLR  R27
0001ac 2788      	CLR  R24
                 __ADDF123:
0001ad 3058      	CPI  R21,8
0001ae f028      	BRLO __ADDF124
0001af 2fab      	MOV  R26,R27
0001b0 2fb8      	MOV  R27,R24
0001b1 2788      	CLR  R24
0001b2 5058      	SUBI R21,8
0001b3 cff9      	RJMP __ADDF123
                 __ADDF124:
0001b4 2355      	TST  R21
0001b5 f029      	BREQ __ADDF126
                 __ADDF125:
0001b6 9586      	LSR  R24
0001b7 95b7      	ROR  R27
0001b8 95a7      	ROR  R26
0001b9 955a      	DEC  R21
0001ba f7d9      	BRNE __ADDF125
                 __ADDF126:
0001bb 2d50      	MOV  R21,R0
0001bc 2551      	EOR  R21,R1
0001bd f072      	BRMI __ADDF127
0001be dfd2      	RCALL __UADD12
0001bf f438      	BRCC __ADDF129
0001c0 9567      	ROR  R22
0001c1 95f7      	ROR  R31
0001c2 95e7      	ROR  R30
0001c3 9573      	INC  R23
0001c4 f413      	BRVC __ADDF129
0001c5 c020      	RJMP __MAXRES
                 __ADDF128:
0001c6 dfbe      	RCALL __SWAPACC
                 __ADDF129:
0001c7 df45      	RCALL __REPACK
0001c8 915f      	POP  R21
0001c9 9508      	RET
                 __ADDF1211:
0001ca f7d8      	BRCC __ADDF128
0001cb cffb      	RJMP __ADDF129
                 __ADDF127:
0001cc 1bea      	SUB  R30,R26
0001cd 0bfb      	SBC  R31,R27
0001ce 0b68      	SBC  R22,R24
0001cf f051      	BREQ __ZERORES
0001d0 f410      	BRCC __ADDF1210
0001d1 9400      	COM  R0
0001d2 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
0001d3 2366      	TST  R22
0001d4 f392      	BRMI __ADDF129
0001d5 0fee      	LSL  R30
0001d6 1fff      	ROL  R31
0001d7 1f66      	ROL  R22
0001d8 957a      	DEC  R23
0001d9 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0001da 27ee      	CLR  R30
0001db 27ff      	CLR  R31
0001dc 2766      	CLR  R22
0001dd 2777      	CLR  R23
0001de 915f      	POP  R21
0001df 9508      	RET
                 
                 __MINRES:
0001e0 efef      	SER  R30
0001e1 efff      	SER  R31
0001e2 e76f      	LDI  R22,0x7F
0001e3 ef7f      	SER  R23
0001e4 915f      	POP  R21
0001e5 9508      	RET
                 
                 __MAXRES:
0001e6 efef      	SER  R30
0001e7 efff      	SER  R31
0001e8 e76f      	LDI  R22,0x7F
0001e9 e77f      	LDI  R23,0x7F
0001ea 915f      	POP  R21
0001eb 9508      	RET
                 
                 __MULF12:
0001ec 935f      	PUSH R21
0001ed df31      	RCALL __UNPACK
0001ee 3870      	CPI  R23,0x80
0001ef f351      	BREQ __ZERORES
0001f0 3890      	CPI  R25,0x80
0001f1 f341      	BREQ __ZERORES
0001f2 2401      	EOR  R0,R1
0001f3 9408      	SEC
0001f4 1f79      	ADC  R23,R25
0001f5 f423      	BRVC __MULF124
0001f6 f31c      	BRLT __ZERORES
                 __MULF125:
0001f7 2000      	TST  R0
0001f8 f33a      	BRMI __MINRES
0001f9 cfec      	RJMP __MAXRES
                 __MULF124:
0001fa 920f      	PUSH R0
0001fb 931f      	PUSH R17
0001fc 932f      	PUSH R18
0001fd 933f      	PUSH R19
0001fe 934f      	PUSH R20
0001ff 2711      	CLR  R17
000200 2722      	CLR  R18
000201 2799      	CLR  R25
000202 9f68      	MUL  R22,R24
000203 01a0      	MOVW R20,R0
000204 9f8f      	MUL  R24,R31
000205 2d30      	MOV  R19,R0
000206 0d41      	ADD  R20,R1
000207 1f59      	ADC  R21,R25
000208 9f6b      	MUL  R22,R27
000209 0d30      	ADD  R19,R0
00020a 1d41      	ADC  R20,R1
00020b 1f59      	ADC  R21,R25
00020c 9f8e      	MUL  R24,R30
00020d d027      	RCALL __MULF126
00020e 9fbf      	MUL  R27,R31
00020f d025      	RCALL __MULF126
000210 9f6a      	MUL  R22,R26
000211 d023      	RCALL __MULF126
000212 9fbe      	MUL  R27,R30
000213 d01d      	RCALL __MULF127
000214 9faf      	MUL  R26,R31
000215 d01b      	RCALL __MULF127
000216 9fae      	MUL  R26,R30
000217 0d11      	ADD  R17,R1
000218 1f29      	ADC  R18,R25
000219 1f39      	ADC  R19,R25
00021a 1f49      	ADC  R20,R25
00021b 1f59      	ADC  R21,R25
00021c 2fe3      	MOV  R30,R19
00021d 2ff4      	MOV  R31,R20
00021e 2f65      	MOV  R22,R21
00021f 2f52      	MOV  R21,R18
000220 914f      	POP  R20
000221 913f      	POP  R19
000222 912f      	POP  R18
000223 911f      	POP  R17
000224 900f      	POP  R0
000225 2366      	TST  R22
000226 f02a      	BRMI __MULF122
000227 0f55      	LSL  R21
000228 1fee      	ROL  R30
000229 1fff      	ROL  R31
00022a 1f66      	ROL  R22
00022b c002      	RJMP __MULF123
                 __MULF122:
00022c 9573      	INC  R23
00022d f24b      	BRVS __MULF125
                 __MULF123:
00022e ded4      	RCALL __ROUND_REPACK
00022f 915f      	POP  R21
000230 9508      	RET
                 
                 __MULF127:
000231 0d10      	ADD  R17,R0
000232 1d21      	ADC  R18,R1
000233 1f39      	ADC  R19,R25
000234 c002      	RJMP __MULF128
                 __MULF126:
000235 0d20      	ADD  R18,R0
000236 1d31      	ADC  R19,R1
                 __MULF128:
000237 1f49      	ADC  R20,R25
000238 1f59      	ADC  R21,R25
000239 9508      	RET
                 
                 __ANEGW1:
00023a 95f1      	NEG  R31
00023b 95e1      	NEG  R30
00023c 40f0      	SBCI R31,0
00023d 9508      	RET
                 
                 __ANEGD1:
00023e 95f0      	COM  R31
00023f 9560      	COM  R22
000240 9570      	COM  R23
000241 95e1      	NEG  R30
000242 4fff      	SBCI R31,-1
000243 4f6f      	SBCI R22,-1
000244 4f7f      	SBCI R23,-1
000245 9508      	RET
                 
                 __CWD1:
000246 2f6f      	MOV  R22,R31
000247 0f66      	ADD  R22,R22
000248 0b66      	SBC  R22,R22
000249 2f76      	MOV  R23,R22
00024a 9508      	RET
                 
                 __MULW12U:
00024b 9ffa      	MUL  R31,R26
00024c 2df0      	MOV  R31,R0
00024d 9feb      	MUL  R30,R27
00024e 0df0      	ADD  R31,R0
00024f 9fea      	MUL  R30,R26
000250 2de0      	MOV  R30,R0
000251 0df1      	ADD  R31,R1
000252 9508      	RET
                 
                 __MULW12:
000253 d02a      	RCALL __CHKSIGNW
000254 dff6      	RCALL __MULW12U
000255 f40e      	BRTC __MULW121
000256 dfe3      	RCALL __ANEGW1
                 __MULW121:
000257 9508      	RET
                 
                 __DIVW21U:
000258 2400      	CLR  R0
000259 2411      	CLR  R1
00025a e190      	LDI  R25,16
                 __DIVW21U1:
00025b 0faa      	LSL  R26
00025c 1fbb      	ROL  R27
00025d 1c00      	ROL  R0
00025e 1c11      	ROL  R1
00025f 1a0e      	SUB  R0,R30
000260 0a1f      	SBC  R1,R31
000261 f418      	BRCC __DIVW21U2
000262 0e0e      	ADD  R0,R30
000263 1e1f      	ADC  R1,R31
000264 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000265 60a1      	SBR  R26,1
                 __DIVW21U3:
000266 959a      	DEC  R25
000267 f799      	BRNE __DIVW21U1
000268 01fd      	MOVW R30,R26
000269 01d0      	MOVW R26,R0
00026a 9508      	RET
                 
                 __DIVW21:
00026b d012      	RCALL __CHKSIGNW
00026c dfeb      	RCALL __DIVW21U
00026d f40e      	BRTC __DIVW211
00026e dfcb      	RCALL __ANEGW1
                 __DIVW211:
00026f 9508      	RET
                 
                 __MODW21:
000270 94e8      	CLT
000271 ffb7      	SBRS R27,7
000272 c004      	RJMP __MODW211
000273 95a0      	COM  R26
000274 95b0      	COM  R27
000275 9611      	ADIW R26,1
000276 9468      	SET
                 __MODW211:
000277 fdf7      	SBRC R31,7
000278 dfc1      	RCALL __ANEGW1
000279 dfde      	RCALL __DIVW21U
00027a 01fd      	MOVW R30,R26
00027b f40e      	BRTC __MODW212
00027c dfbd      	RCALL __ANEGW1
                 __MODW212:
00027d 9508      	RET
                 
                 __CHKSIGNW:
00027e 94e8      	CLT
00027f fff7      	SBRS R31,7
000280 c002      	RJMP __CHKSW1
000281 dfb8      	RCALL __ANEGW1
000282 9468      	SET
                 __CHKSW1:
000283 ffb7      	SBRS R27,7
000284 c006      	RJMP __CHKSW2
000285 95a0      	COM  R26
000286 95b0      	COM  R27
000287 9611      	ADIW R26,1
000288 f800      	BLD  R0,0
000289 9403      	INC  R0
00028a fa00      	BST  R0,0
                 __CHKSW2:
00028b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535L register use summary:
r0 :  35 r1 :  21 r2 :   0 r3 :   0 r4 :   3 r5 :   0 r6 :   2 r7 :   1 
r8 :   3 r9 :   1 r10:   2 r11:   1 r12:   3 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   7 r19:   8 r20:  16 r21:  55 r22:  42 r23:  34 
r24:  26 r25:  26 r26:  43 r27:  28 r28:   2 r29:   1 r30: 114 r31:  45 
x  :   7 y  :   2 z  :   7 
Registers used: 28 out of 35 (80.0%)

ATmega8535L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  21 add   :  13 
adiw  :   5 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  12 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   1 brmi  :   6 brne  :  12 brpl  :   5 brsh  :   0 brtc  :   4 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 cbi   :   6 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  18 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 cp    :   0 
cpc   :   0 cpi   :  13 cpse  :   0 dec   :   8 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   3 ld    :   3 ldd   :   0 ldi   :  60 lds   :   4 lpm   :   7 
lsl   :  11 lsr   :   2 mov   :  26 movw  :  24 mul   :  12 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :   1 out   :  46 
pop   :  13 push  :  12 rcall :  56 ret   :  29 reti  :   0 rjmp  :  52 
rol   :  16 ror   :  12 sbc   :   4 sbci  :   8 sbi   :   5 sbic  :   1 
sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 sbrs  :   4 sec   :   1 
seh   :   0 sei   :   0 sen   :   0 ser   :   8 ses   :   0 set   :   4 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   6 std   :   0 
sts   :   0 sub   :   4 subi  :   3 swap  :   0 tst   :  11 wdr   :   1 

Instructions used: 63 out of 114 (55.3%)

ATmega8535L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000518   1270     34   1304    8192  15.9%
[.dseg] 0x000060 0x0000ec      0     12     12     512   2.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
